{"ast":null,"code":"/**\n * @title Node PDF main.js\n * Node PDF allows you to convert pdf files into raw text. The library supports\n * text extraction from electronic searchable pdfs.\n *\n * In addition, the library supports OCR text extract from pdfs which just\n * contain scanned images via the tesseract-ocr engine\n *\n * Multi-page pdfs are supported for both searchable and image pdfs.\n * The library returns an array of strings where the string at a given\n * index in the output array cooresponds the page in the input pdf document\n *\n * @author Noah Isaacson\n * @date 2012-10-26\n */\nvar path = require('path');\n\nvar temp = require('temp');\n\nvar exec = require('child_process').exec;\n\nvar fs = require('fs');\n\nvar walk = require('walk');\n\nvar async = require('async');\n\nvar rimraf = require('rimraf');\n\nvar Raw = require('./lib/raw');\n\nvar Electronic = require('./lib/electronic');\n/**\n * To process a pdf, pass in the absolute path to the pdf file on disk\n\n * @param {Object} params should have the following fields set\n * @param {String} params.pdf_path the absolute path to the pdf file on disk\n * @param {Boolean} params.clean true if you want the temporary single page pdfs\n * @param {Boolean} options.type must be either \"ocr\" or \"text\"\n *\n * @return {Array} text_pages is an array of strings, where each string is the\n * extracted text for the matching page index in the pdf document\n * @return {Processor} a processor object which will emit events as they occur\n */\n\n\nmodule.exports = function (pdf_path, options, cb) {\n  var err;\n  var processor = new Raw();\n\n  if (!'pdf_path') {\n    err = 'you must supply a pdf path as the first parameter';\n    return cb(err);\n  }\n\n  if (!options) {\n    err = 'no options supplied. You must supply an options object with the \"type\" field set';\n    return cb(err);\n  }\n\n  if (!options.hasOwnProperty('type') || !options.type) {\n    err = 'error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);\n  }\n\n  if (options.type === 'ocr') {\n    processor = new Raw();\n  } else if (options.type === 'text') {\n    processor = new Electronic();\n  } else {\n    err = 'error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);\n    ;\n  }\n\n  fs.exists(pdf_path, function (exists) {\n    if (!exists) {\n      err = 'no file exists at the path you specified';\n      return cb(err);\n    }\n\n    processor.process(pdf_path, options);\n    cb();\n  });\n  return processor;\n};","map":{"version":3,"names":["path","require","temp","exec","fs","walk","async","rimraf","Raw","Electronic","module","exports","pdf_path","options","cb","err","processor","hasOwnProperty","type","exists","process"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/pdf-extract/main.js"],"sourcesContent":["/**\n * @title Node PDF main.js\n * Node PDF allows you to convert pdf files into raw text. The library supports\n * text extraction from electronic searchable pdfs.\n *\n * In addition, the library supports OCR text extract from pdfs which just\n * contain scanned images via the tesseract-ocr engine\n *\n * Multi-page pdfs are supported for both searchable and image pdfs.\n * The library returns an array of strings where the string at a given\n * index in the output array cooresponds the page in the input pdf document\n *\n * @author Noah Isaacson\n * @date 2012-10-26\n */\nvar path = require('path');\nvar temp = require('temp');\nvar exec = require('child_process').exec;\nvar fs = require('fs');\nvar walk = require('walk');\nvar async = require('async');\nvar rimraf = require('rimraf');\n\nvar Raw = require('./lib/raw');\nvar Electronic = require('./lib/electronic');\n\n/**\n * To process a pdf, pass in the absolute path to the pdf file on disk\n\n * @param {Object} params should have the following fields set\n * @param {String} params.pdf_path the absolute path to the pdf file on disk\n * @param {Boolean} params.clean true if you want the temporary single page pdfs\n * @param {Boolean} options.type must be either \"ocr\" or \"text\"\n *\n * @return {Array} text_pages is an array of strings, where each string is the\n * extracted text for the matching page index in the pdf document\n * @return {Processor} a processor object which will emit events as they occur\n */\nmodule.exports = function(pdf_path, options, cb) {\n  var err;\n  var processor = new Raw();\n  if (!'pdf_path') {\n    err = 'you must supply a pdf path as the first parameter'\n    return cb(err);\n  }\n  if (!options) {\n    err =  'no options supplied. You must supply an options object with the \"type\" field set'\n    return cb(err);\n  }\n  if (!options.hasOwnProperty('type') || ! options.type) {\n    err  ='error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);\n  }\n  if (options.type === 'ocr') {\n    processor = new Raw();\n  }\n  else if (options.type === 'text') {\n    processor = new Electronic();\n  }\n  else {\n    err  ='error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);;\n  }\n  fs.exists(pdf_path, function (exists) {\n    if (!exists) {\n      err = 'no file exists at the path you specified';\n      return cb(err);\n    }\n    processor.process(pdf_path, options);\n    cb();\n  });\n  return processor;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,IAApC;;AACA,IAAIC,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIO,GAAG,GAAGP,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIQ,UAAU,GAAGR,OAAO,CAAC,kBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAS,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,OAAnB,EAA4BC,EAA5B,EAAgC;EAC/C,IAAIC,GAAJ;EACA,IAAIC,SAAS,GAAG,IAAIR,GAAJ,EAAhB;;EACA,IAAI,CAAC,UAAL,EAAiB;IACfO,GAAG,GAAG,mDAAN;IACA,OAAOD,EAAE,CAACC,GAAD,CAAT;EACD;;EACD,IAAI,CAACF,OAAL,EAAc;IACZE,GAAG,GAAI,kFAAP;IACA,OAAOD,EAAE,CAACC,GAAD,CAAT;EACD;;EACD,IAAI,CAACF,OAAO,CAACI,cAAR,CAAuB,MAAvB,CAAD,IAAmC,CAAEJ,OAAO,CAACK,IAAjD,EAAuD;IACrDH,GAAG,GAAG,8HAAN;IACA,OAAOD,EAAE,CAACC,GAAD,CAAT;EACD;;EACD,IAAIF,OAAO,CAACK,IAAR,KAAiB,KAArB,EAA4B;IAC1BF,SAAS,GAAG,IAAIR,GAAJ,EAAZ;EACD,CAFD,MAGK,IAAIK,OAAO,CAACK,IAAR,KAAiB,MAArB,EAA6B;IAChCF,SAAS,GAAG,IAAIP,UAAJ,EAAZ;EACD,CAFI,MAGA;IACHM,GAAG,GAAG,8HAAN;IACA,OAAOD,EAAE,CAACC,GAAD,CAAT;IAAe;EAChB;;EACDX,EAAE,CAACe,MAAH,CAAUP,QAAV,EAAoB,UAAUO,MAAV,EAAkB;IACpC,IAAI,CAACA,MAAL,EAAa;MACXJ,GAAG,GAAG,0CAAN;MACA,OAAOD,EAAE,CAACC,GAAD,CAAT;IACD;;IACDC,SAAS,CAACI,OAAV,CAAkBR,QAAlB,EAA4BC,OAA5B;IACAC,EAAE;EACH,CAPD;EAQA,OAAOE,SAAP;AACD,CAlCD"},"metadata":{},"sourceType":"script"}