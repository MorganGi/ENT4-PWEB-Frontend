{"ast":null,"code":"/**\n * These utility methods help to process the data and to convert it to desired dimensions\n */\n\n/** @private */\nexport function processPathData(data) {\n  var collection = [];\n  var j;\n  var arrayCollection = parsePathData(data);\n\n  if (arrayCollection.length > 0) {\n    for (var i = 0; i < arrayCollection.length; i++) {\n      var ob = arrayCollection[i];\n      var char = '';\n      char = ob[0];\n\n      switch (char.toLowerCase()) {\n        case 'm':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x: ob[j],\n              y: ob[j + 1]\n            });\n            j = j + 1;\n\n            if (char === 'm') {\n              char = 'l';\n            } else if (char === 'M') {\n              char = 'L';\n            }\n          }\n\n          break;\n\n        case 'l':\n        case 't':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x: ob[j],\n              y: ob[j + 1]\n            });\n            j = j + 1;\n          }\n\n          break;\n\n        case 'h':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x: ob[j]\n            });\n          }\n\n          break;\n\n        case 'v':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              y: ob[j]\n            });\n          }\n\n          break;\n\n        case 'z':\n          collection.push({\n            command: char\n          });\n          break;\n\n        case 'c':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x1: ob[j],\n              y1: ob[j + 1],\n              x2: ob[j + 2],\n              y2: ob[j + 3],\n              x: ob[j + 4],\n              y: ob[j + 5]\n            });\n            j = j + 5;\n          }\n\n          break;\n\n        case 's':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x2: ob[j],\n              y2: ob[j + 1],\n              x: ob[j + 2],\n              y: ob[j + 3]\n            });\n            j = j + 3;\n          }\n\n          break;\n\n        case 'q':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              x1: ob[j],\n              y1: ob[j + 1],\n              x: ob[j + 2],\n              y: ob[j + 3]\n            });\n            j = j + 3;\n          }\n\n          break;\n\n        case 'a':\n          for (j = 1; j < ob.length; j++) {\n            collection.push({\n              command: char,\n              r1: ob[j],\n              r2: ob[j + 1],\n              angle: ob[j + 2],\n              largeArc: ob[j + 3],\n              sweep: ob[j + 4],\n              x: ob[j + 5],\n              y: ob[j + 6]\n            });\n            j = j + 6;\n          }\n\n          break;\n      }\n    }\n  }\n\n  return collection;\n}\n/** @private */\n\nexport function parsePathData(data) {\n  var tokenizer = /([a-z]+)|([+-]?(?:\\d+\\.?\\d*|\\.\\d+))/gi;\n  var current = [];\n  var commands = [];\n  var match = {};\n  tokenizer.lastIndex = 0;\n  var isExponential = false;\n  match = tokenizer.exec(data);\n\n  while (match) {\n    if (match[1] === 'e') {\n      var s1 = '';\n      isExponential = true;\n    } else if (match[1]) {\n      if (match[1].toLowerCase() === 'zm') {\n        if (current.length) {\n          commands.push(current);\n        }\n\n        commands.push(['Z']);\n        current = [match[1].substring(1, 2)];\n      } else {\n        if (current.length) {\n          commands.push(current);\n        }\n\n        current = [match[1]];\n      }\n\n      isExponential = false;\n    } else {\n      if (!current.length) {\n        current = [];\n      }\n\n      if (!isExponential) {\n        current.push(Number(match[2]));\n      }\n\n      isExponential = false;\n    }\n\n    match = tokenizer.exec(data);\n  }\n\n  if (current.length) {\n    commands.push(current);\n  }\n\n  return commands;\n}\n/**\n * Used to find the path for rounded rect\n */\n\nexport function getRectanglePath(cornerRadius, height, width) {\n  var x = 0;\n  var y = 0;\n  var path = '';\n  var points = [{\n    x: x + cornerRadius,\n    y: y\n  }, {\n    x: x + width - cornerRadius,\n    y: y\n  }, {\n    x: x + width,\n    y: y + cornerRadius\n  }, {\n    x: x + width,\n    y: y + height - cornerRadius\n  }, {\n    x: x + width - cornerRadius,\n    y: y + height\n  }, {\n    x: x + cornerRadius,\n    y: y + height\n  }, {\n    x: x,\n    y: y + height - cornerRadius\n  }, {\n    x: x,\n    y: y + cornerRadius\n  }];\n  var corners = [{\n    x: x + width,\n    y: y\n  }, {\n    x: x + width,\n    y: y + height\n  }, {\n    x: x,\n    y: y + height\n  }, {\n    x: x,\n    y: y\n  }];\n  var corner = 0;\n  var point2;\n  var next;\n  path = 'M' + points[0].x + ' ' + points[0].y;\n  var i;\n\n  for (i = 0; i < points.length; i = i + 2) {\n    point2 = points[i + 1];\n    path += 'L' + point2.x + ' ' + point2.y;\n    next = points[i + 2] || points[0];\n    path += 'Q' + corners[corner].x + ' ' + corners[corner].y + ' ' + next.x + ' ' + next.y;\n    corner++;\n  }\n\n  return path;\n}\n/** @private */\n\nexport function pathSegmentCollection(collection) {\n  var x0;\n  var y0;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x;\n  var y;\n  var length;\n  var i;\n  var initx;\n  var inity;\n  var segments = [];\n\n  for (x = 0, y = 0, i = 0, length = collection.length; i < length; ++i) {\n    var obj = collection[i];\n    var seg = obj;\n    var char = '';\n    char = seg.command;\n\n    if ('y1' in seg) {\n      y1 = seg.y1;\n    }\n\n    if ('y2' in seg) {\n      y2 = seg.y2;\n    }\n\n    if ('x1' in seg) {\n      x1 = seg.x1;\n    }\n\n    if ('x2' in seg) {\n      x2 = seg.x2;\n    }\n\n    if ('x' in seg) {\n      x = seg.x;\n    }\n\n    if ('y' in seg) {\n      y = seg.y;\n    }\n\n    var prev = segments[segments.length - 1];\n\n    switch (char) {\n      case 'M':\n        segments.push({\n          command: 'M',\n          x: x,\n          y: y\n        });\n        break;\n\n      case 'L':\n        segments.push({\n          command: 'L',\n          x0: x0,\n          y0: y0,\n          x: x,\n          y: y\n        });\n        break;\n\n      case 'H':\n        segments.push({\n          command: 'L',\n          x0: x0,\n          y0: y0,\n          x: x,\n          y: y0\n        });\n        break;\n\n      case 'V':\n        segments.push({\n          command: 'L',\n          x0: x0,\n          y0: y0,\n          x: x0,\n          y: y\n        });\n        break;\n\n      case 'C':\n        segments.push({\n          command: 'C',\n          x0: x0,\n          y0: y0,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          x: x,\n          y: y\n        });\n        break;\n\n      case 'S':\n        if (prev) {\n          var ctrl = void 0;\n\n          if (prev.command === 'C' || prev.command === 'S') {\n            ctrl = {\n              x: prev.x2,\n              y: prev.y2\n            };\n          } else {\n            ctrl = {\n              x: x0,\n              y: y0\n            };\n          }\n\n          var cpt2 = {\n            x: 2 * x0 - ctrl.x,\n            y: 2 * y0 - ctrl.y\n          };\n          segments.push({\n            command: 'C',\n            x0: x0,\n            y0: y0,\n            x1: cpt2.x,\n            y1: cpt2.y,\n            x2: x2,\n            y2: y2,\n            x: x,\n            y: y\n          });\n        }\n\n        break;\n\n      case 'Q':\n        //ctx.quadraticCurveTo(x1, y1, x, y);\n        segments.push({\n          command: 'Q',\n          x0: x0,\n          y0: y0,\n          x1: x1,\n          y1: y1,\n          x: x,\n          y: y\n        });\n        break;\n\n      case 'T':\n        if (prev) {\n          var ctrl = void 0;\n\n          if (prev.command === 'Q') {\n            ctrl = {\n              x: prev.x1,\n              y: prev.y1\n            };\n          } else {\n            ctrl = {\n              x: x0,\n              y: y0\n            };\n          }\n\n          var cpt2 = {\n            x: 2 * x0 - ctrl.x,\n            y: 2 * y0 - ctrl.y\n          };\n          segments.push({\n            command: 'Q',\n            x0: x0,\n            y0: y0,\n            x1: cpt2.x,\n            y1: cpt2.y,\n            x: x,\n            y: y\n          });\n        }\n\n        break;\n\n      case 'A':\n        var newSeg = seg;\n        newSeg.command = 'A';\n        segments.push(newSeg);\n        break;\n\n      case 'Z':\n      case 'z':\n        segments.push({\n          command: 'Z'\n        });\n        x = x0;\n        y = y0;\n        break;\n    }\n\n    if (char === 'M' || char === 'm') {\n      initx = x;\n      inity = y;\n    }\n\n    x0 = x;\n    y0 = y;\n  }\n\n  return segments;\n}\n/** @private */\n\nexport function transformPath(arr, sX, sY, s, bX, bY, iX, iY) {\n  var x0;\n  var y0;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x;\n  var y;\n  var length;\n  var i;\n  var newSeg;\n\n  for (x = 0, y = 0, i = 0, length = arr.length; i < length; ++i) {\n    var obj = arr[i];\n    var seg = obj;\n    var char = seg.command;\n\n    if ('x' in seg) {\n      x = seg.x;\n    }\n\n    if ('y' in seg) {\n      y = seg.y;\n    }\n\n    if ('y1' in seg) {\n      y1 = seg.y1;\n    }\n\n    if ('y2' in seg) {\n      y2 = seg.y2;\n    }\n\n    if ('x1' in seg) {\n      x1 = seg.x1;\n    }\n\n    if ('x2' in seg) {\n      x2 = seg.x2;\n    }\n\n    if (s) {\n      if (x !== undefined) {\n        x = scalePathData(x, sX, bX, iX);\n      }\n\n      if (y !== undefined) {\n        y = scalePathData(y, sY, bY, iY);\n      }\n\n      if (x1 !== undefined) {\n        x1 = scalePathData(x1, sX, bX, iX);\n      }\n\n      if (y1 !== undefined) {\n        y1 = scalePathData(y1, sY, bY, iY);\n      }\n\n      if (x2 !== undefined) {\n        x2 = scalePathData(x2, sX, bX, iX);\n      }\n\n      if (y2 !== undefined) {\n        y2 = scalePathData(y2, sY, bY, iY);\n      }\n    } else {\n      if (x !== undefined) {\n        x = Number((x + sX).toFixed(2));\n      }\n\n      if (y !== undefined) {\n        y = Number((y + sY).toFixed(2));\n      }\n\n      if (x1 !== undefined) {\n        x1 = Number((x1 + sX).toFixed(2));\n      }\n\n      if (y1 !== undefined) {\n        y1 = Number((y1 + sY).toFixed(2));\n      }\n\n      if (x2 !== undefined) {\n        x2 = Number((x2 + sX).toFixed(2));\n      }\n\n      if (y2 !== undefined) {\n        y2 = Number((y2 + sY).toFixed(2));\n      }\n    }\n\n    var scaledPath = {\n      x: x,\n      y: y,\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      r1: seg.r1,\n      r2: seg.r2\n    };\n    newSeg = updatedSegment(seg, char, scaledPath, s, sX, sY);\n\n    if (newSeg) {\n      arr[i] = newSeg;\n    } // Record the start of a subpath\n\n\n    if (char === 'M' || char === 'm') {\n      x0 = x;\n      y0 = y;\n    }\n  }\n\n  var pathData = getPathString(arr);\n  return pathData;\n}\n/** @private */\n\nexport function updatedSegment(segment, char, obj, isScale, sX, sY) {\n  switch (char) {\n    case 'M':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      break;\n\n    case 'L':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      break;\n\n    case 'H':\n      segment.x = obj.x;\n      break;\n\n    case 'V':\n      segment.y = obj.y;\n      break;\n\n    case 'C':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.x1 = obj.x1;\n      segment.y1 = obj.y1;\n      segment.x2 = obj.x2;\n      segment.y2 = obj.y2;\n      break;\n\n    case 'S':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.x2 = obj.x2;\n      segment.y2 = obj.y2;\n      break;\n\n    case 'Q':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.x1 = obj.x1;\n      segment.y1 = obj.y1;\n      break;\n\n    case 'T':\n      segment.x = obj.x;\n      segment.y = obj.y;\n      break;\n\n    case 'A':\n      var r1 = obj.r1;\n      var r2 = obj.r2;\n\n      if (isScale) {\n        obj.r1 = r1 = r1 * sX;\n        obj.r2 = r2 = r2 * sY;\n      }\n\n      segment.x = obj.x;\n      segment.y = obj.y;\n      segment.r1 = obj.r1;\n      segment.r2 = obj.r2;\n      break;\n\n    case 'z':\n    case 'Z':\n      segment = {\n        command: 'Z'\n      };\n      break;\n  }\n\n  return segment;\n}\n/** @private */\n\nexport function scalePathData(val, scaleFactor, oldOffset, newOffset) {\n  if (val !== oldOffset) {\n    if (newOffset !== oldOffset) {\n      val = val * scaleFactor - (Number(oldOffset) * scaleFactor - Number(oldOffset)) + (newOffset - Number(oldOffset));\n    } else {\n      val = Number(val) * scaleFactor - (Number(oldOffset) * scaleFactor - Number(oldOffset));\n    }\n  } else {\n    if (newOffset !== oldOffset) {\n      val = newOffset;\n    }\n  }\n\n  return Number(val.toFixed(2));\n}\n/** @private */\n\nexport function splitArrayCollection(arrayCollection) {\n  var x0;\n  var y0;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x;\n  var y;\n  var length;\n  var i;\n\n  for (x = 0, y = 0, i = 0, length = arrayCollection.length; i < length; ++i) {\n    var path = arrayCollection[i];\n    var seg = path;\n    var char = seg.command;\n\n    if (/[MLHVCSQTA]/.test(char)) {\n      if ('x' in seg) {\n        seg.x = x = seg.x;\n      }\n\n      if ('y' in seg) {\n        seg.y = y = seg.y;\n      }\n    } else {\n      if ('x1' in seg) {\n        seg.x1 = x1 = x + seg.x1;\n      }\n\n      if ('x2' in seg) {\n        seg.x2 = x2 = x + seg.x2;\n      }\n\n      if ('y1' in seg) {\n        seg.y1 = y1 = y + seg.y1;\n      }\n\n      if ('y2' in seg) {\n        seg.y2 = y2 = y + seg.y2;\n      }\n\n      if ('x' in seg) {\n        seg.x = x += seg.x;\n      }\n\n      if ('y' in seg) {\n        seg.y = y += seg.y;\n      }\n\n      var newSeg = void 0;\n\n      switch (char) {\n        case 'm':\n        case 'M':\n          newSeg = {\n            command: 'M',\n            x: x,\n            y: y\n          };\n          break;\n\n        case 'l':\n        case 'L':\n          newSeg = {\n            command: 'L',\n            x: x,\n            y: y\n          };\n          break;\n\n        case 'h':\n        case 'H':\n          newSeg = {\n            command: 'H',\n            x: x\n          };\n          break;\n\n        case 'v':\n        case 'V':\n          newSeg = {\n            command: 'V',\n            y: y\n          };\n          break;\n\n        case 'c':\n        case 'C':\n          newSeg = {\n            command: 'C',\n            x: x,\n            y: y,\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n          };\n          break;\n\n        case 's':\n        case 'S':\n          newSeg = {\n            command: 'S',\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2\n          };\n          break;\n\n        case 'q':\n        case 'Q':\n          newSeg = {\n            command: 'Q',\n            x: x,\n            y: y,\n            x1: x1,\n            y1: y1\n          };\n          break;\n\n        case 't':\n        case 'T':\n          newSeg = {\n            command: 'T',\n            x: x,\n            y: y\n          };\n          break;\n\n        case 'a':\n        case 'A':\n          newSeg = {\n            command: 'A',\n            x: x,\n            y: y\n          };\n          newSeg.r1 = seg.r1;\n          newSeg.r2 = seg.r2;\n          newSeg.angle = seg.angle;\n          newSeg.largeArc = seg.largeArc;\n          newSeg.sweep = seg.sweep;\n          break;\n\n        case 'z':\n        case 'Z':\n          newSeg = {\n            command: 'Z'\n          };\n          x = x0;\n          y = y0;\n          newSeg = arrayCollection[i];\n          break;\n      }\n\n      if (newSeg) {\n        arrayCollection[i] = newSeg;\n      }\n    }\n\n    if (char === 'M' || char === 'm') {\n      x0 = x;\n      y0 = y;\n    }\n  }\n\n  return arrayCollection;\n}\n/** @private */\n\nexport function getPathString(arrayCollection) {\n  var getNewString = '';\n  var i;\n\n  for (i = 0; i < arrayCollection.length; i++) {\n    if (i === 0) {\n      getNewString += getString(arrayCollection[i]);\n    } else {\n      getNewString += ' ' + getString(arrayCollection[i]);\n    }\n  }\n\n  return getNewString;\n}\n/** @private */\n\nexport function getString(obj) {\n  var string = '';\n\n  switch (obj.command) {\n    case 'Z':\n    case 'z':\n      string = obj.command;\n      break;\n\n    case 'M':\n    case 'm':\n    case 'L':\n    case 'l':\n      string = obj.command + ' ' + obj.x + ' ' + obj.y;\n      break;\n\n    case 'C':\n    case 'c':\n      string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n      break;\n\n    case 'Q':\n    case 'q':\n      string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x + ' ' + obj.y;\n      break;\n\n    case 'A':\n    case 'a':\n      var cmd = obj.command;\n      var ang = obj.angle;\n      var l = obj.largeArc ? '1' : '0';\n      var s = obj.sweep ? '1' : '0';\n      string = cmd + ' ' + obj.r1 + ' ' + obj.r2 + ' ' + ang + ' ' + l + ' ' + s + ' ' + obj.x + ' ' + obj.y;\n      break;\n\n    case 'H':\n    case 'h':\n      string = obj.command + ' ' + obj.x;\n      break;\n\n    case 'V':\n    case 'v':\n      string = obj.command + ' ' + obj.y;\n      break;\n\n    case 'S':\n    case 's':\n      string = obj.command + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n      break;\n\n    case 'T':\n    case 't':\n      string = obj.command + ' ' + obj.x + ' ' + obj.y;\n  }\n\n  return string;\n}","map":{"version":3,"names":["processPathData","data","collection","j","arrayCollection","parsePathData","length","i","ob","char","toLowerCase","push","command","x","y","x1","y1","x2","y2","r1","r2","angle","largeArc","sweep","tokenizer","current","commands","match","lastIndex","isExponential","exec","s1","substring","Number","getRectanglePath","cornerRadius","height","width","path","points","corners","corner","point2","next","pathSegmentCollection","x0","y0","initx","inity","segments","obj","seg","prev","ctrl","cpt2","newSeg","transformPath","arr","sX","sY","s","bX","bY","iX","iY","undefined","scalePathData","toFixed","scaledPath","updatedSegment","pathData","getPathString","segment","isScale","val","scaleFactor","oldOffset","newOffset","splitArrayCollection","test","getNewString","getString","string","cmd","ang","l"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-drawings/src/drawing/utility/path-util.js"],"sourcesContent":["/**\n * These utility methods help to process the data and to convert it to desired dimensions\n */\n/** @private */\nexport function processPathData(data) {\n    var collection = [];\n    var j;\n    var arrayCollection = parsePathData(data);\n    if (arrayCollection.length > 0) {\n        for (var i = 0; i < arrayCollection.length; i++) {\n            var ob = arrayCollection[i];\n            var char = '';\n            char = ob[0];\n            switch (char.toLowerCase()) {\n                case 'm':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x: ob[j], y: ob[j + 1] });\n                        j = j + 1;\n                        if (char === 'm') {\n                            char = 'l';\n                        }\n                        else if (char === 'M') {\n                            char = 'L';\n                        }\n                    }\n                    break;\n                case 'l':\n                case 't':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x: ob[j], y: ob[j + 1] });\n                        j = j + 1;\n                    }\n                    break;\n                case 'h':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x: ob[j] });\n                    }\n                    break;\n                case 'v':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, y: ob[j] });\n                    }\n                    break;\n                case 'z':\n                    collection.push({ command: char });\n                    break;\n                case 'c':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({\n                            command: char, x1: ob[j], y1: ob[j + 1], x2: ob[j + 2], y2: ob[j + 3], x: ob[j + 4], y: ob[j + 5]\n                        });\n                        j = j + 5;\n                    }\n                    break;\n                case 's':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x2: ob[j], y2: ob[j + 1], x: ob[j + 2], y: ob[j + 3] });\n                        j = j + 3;\n                    }\n                    break;\n                case 'q':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({ command: char, x1: ob[j], y1: ob[j + 1], x: ob[j + 2], y: ob[j + 3] });\n                        j = j + 3;\n                    }\n                    break;\n                case 'a':\n                    for (j = 1; j < ob.length; j++) {\n                        collection.push({\n                            command: char, r1: ob[j], r2: ob[j + 1], angle: ob[j + 2], largeArc: ob[j + 3],\n                            sweep: ob[j + 4], x: ob[j + 5], y: ob[j + 6]\n                        });\n                        j = j + 6;\n                    }\n                    break;\n            }\n        }\n    }\n    return collection;\n}\n/** @private */\nexport function parsePathData(data) {\n    var tokenizer = /([a-z]+)|([+-]?(?:\\d+\\.?\\d*|\\.\\d+))/gi;\n    var current = [];\n    var commands = [];\n    var match = {};\n    tokenizer.lastIndex = 0;\n    var isExponential = false;\n    match = tokenizer.exec(data);\n    while (match) {\n        if (match[1] === 'e') {\n            var s1 = '';\n            isExponential = true;\n        }\n        else if (match[1]) {\n            if (match[1].toLowerCase() === 'zm') {\n                if (current.length) {\n                    commands.push(current);\n                }\n                commands.push(['Z']);\n                current = [match[1].substring(1, 2)];\n            }\n            else {\n                if (current.length) {\n                    commands.push(current);\n                }\n                current = [match[1]];\n            }\n            isExponential = false;\n        }\n        else {\n            if (!current.length) {\n                current = [];\n            }\n            if (!isExponential) {\n                current.push(Number(match[2]));\n            }\n            isExponential = false;\n        }\n        match = tokenizer.exec(data);\n    }\n    if (current.length) {\n        commands.push(current);\n    }\n    return commands;\n}\n/**\n * Used to find the path for rounded rect\n */\nexport function getRectanglePath(cornerRadius, height, width) {\n    var x = 0;\n    var y = 0;\n    var path = '';\n    var points = [{ x: x + cornerRadius, y: y }, { x: x + width - cornerRadius, y: y },\n        { x: x + width, y: y + cornerRadius }, { x: x + width, y: y + height - cornerRadius },\n        { x: x + width - cornerRadius, y: y + height }, { x: x + cornerRadius, y: y + height },\n        { x: x, y: y + height - cornerRadius }, { x: x, y: y + cornerRadius }\n    ];\n    var corners = [{ x: x + width, y: y }, { x: x + width, y: y + height }, { x: x, y: y + height }, { x: x, y: y }];\n    var corner = 0;\n    var point2;\n    var next;\n    path = 'M' + points[0].x + ' ' + points[0].y;\n    var i;\n    for (i = 0; i < points.length; i = i + 2) {\n        point2 = points[i + 1];\n        path += 'L' + point2.x + ' ' + point2.y;\n        next = points[i + 2] || points[0];\n        path += 'Q' + corners[corner].x + ' ' + corners[corner].y + ' ' + next.x + ' ' + next.y;\n        corner++;\n    }\n    return path;\n}\n/** @private */\nexport function pathSegmentCollection(collection) {\n    var x0;\n    var y0;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x;\n    var y;\n    var length;\n    var i;\n    var initx;\n    var inity;\n    var segments = [];\n    for (x = 0, y = 0, i = 0, length = collection.length; i < length; ++i) {\n        var obj = collection[i];\n        var seg = obj;\n        var char = '';\n        char = seg.command;\n        if ('y1' in seg) {\n            y1 = seg.y1;\n        }\n        if ('y2' in seg) {\n            y2 = seg.y2;\n        }\n        if ('x1' in seg) {\n            x1 = seg.x1;\n        }\n        if ('x2' in seg) {\n            x2 = seg.x2;\n        }\n        if ('x' in seg) {\n            x = seg.x;\n        }\n        if ('y' in seg) {\n            y = seg.y;\n        }\n        var prev = segments[segments.length - 1];\n        switch (char) {\n            case 'M':\n                segments.push({ command: 'M', x: x, y: y });\n                break;\n            case 'L':\n                segments.push({ command: 'L', x0: x0, y0: y0, x: x, y: y });\n                break;\n            case 'H':\n                segments.push({ command: 'L', x0: x0, y0: y0, x: x, y: y0 });\n                break;\n            case 'V':\n                segments.push({ command: 'L', x0: x0, y0: y0, x: x0, y: y });\n                break;\n            case 'C':\n                segments.push({ command: 'C', x0: x0, y0: y0, x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y });\n                break;\n            case 'S':\n                if (prev) {\n                    var ctrl = void 0;\n                    if (prev.command === 'C' || prev.command === 'S') {\n                        ctrl = { x: prev.x2, y: prev.y2 };\n                    }\n                    else {\n                        ctrl = { x: x0, y: y0 };\n                    }\n                    var cpt2 = { x: 2 * x0 - ctrl.x, y: 2 * y0 - ctrl.y };\n                    segments.push({ command: 'C', x0: x0, y0: y0, x1: cpt2.x, y1: cpt2.y, x2: x2, y2: y2, x: x, y: y });\n                }\n                break;\n            case 'Q':\n                //ctx.quadraticCurveTo(x1, y1, x, y);\n                segments.push({ command: 'Q', x0: x0, y0: y0, x1: x1, y1: y1, x: x, y: y });\n                break;\n            case 'T':\n                if (prev) {\n                    var ctrl = void 0;\n                    if (prev.command === 'Q') {\n                        ctrl = { x: prev.x1, y: prev.y1 };\n                    }\n                    else {\n                        ctrl = { x: x0, y: y0 };\n                    }\n                    var cpt2 = { x: 2 * x0 - ctrl.x, y: 2 * y0 - ctrl.y };\n                    segments.push({ command: 'Q', x0: x0, y0: y0, x1: cpt2.x, y1: cpt2.y, x: x, y: y });\n                }\n                break;\n            case 'A':\n                var newSeg = seg;\n                newSeg.command = 'A';\n                segments.push(newSeg);\n                break;\n            case 'Z':\n            case 'z':\n                segments.push({ command: 'Z' });\n                x = x0;\n                y = y0;\n                break;\n        }\n        if (char === 'M' || char === 'm') {\n            initx = x;\n            inity = y;\n        }\n        x0 = x;\n        y0 = y;\n    }\n    return segments;\n}\n/** @private */\nexport function transformPath(arr, sX, sY, s, bX, bY, iX, iY) {\n    var x0;\n    var y0;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x;\n    var y;\n    var length;\n    var i;\n    var newSeg;\n    for (x = 0, y = 0, i = 0, length = arr.length; i < length; ++i) {\n        var obj = arr[i];\n        var seg = obj;\n        var char = seg.command;\n        if ('x' in seg) {\n            x = seg.x;\n        }\n        if ('y' in seg) {\n            y = seg.y;\n        }\n        if ('y1' in seg) {\n            y1 = seg.y1;\n        }\n        if ('y2' in seg) {\n            y2 = seg.y2;\n        }\n        if ('x1' in seg) {\n            x1 = seg.x1;\n        }\n        if ('x2' in seg) {\n            x2 = seg.x2;\n        }\n        if (s) {\n            if (x !== undefined) {\n                x = scalePathData(x, sX, bX, iX);\n            }\n            if (y !== undefined) {\n                y = scalePathData(y, sY, bY, iY);\n            }\n            if (x1 !== undefined) {\n                x1 = scalePathData(x1, sX, bX, iX);\n            }\n            if (y1 !== undefined) {\n                y1 = scalePathData(y1, sY, bY, iY);\n            }\n            if (x2 !== undefined) {\n                x2 = scalePathData(x2, sX, bX, iX);\n            }\n            if (y2 !== undefined) {\n                y2 = scalePathData(y2, sY, bY, iY);\n            }\n        }\n        else {\n            if (x !== undefined) {\n                x = Number((x + sX).toFixed(2));\n            }\n            if (y !== undefined) {\n                y = Number((y + sY).toFixed(2));\n            }\n            if (x1 !== undefined) {\n                x1 = Number((x1 + sX).toFixed(2));\n            }\n            if (y1 !== undefined) {\n                y1 = Number((y1 + sY).toFixed(2));\n            }\n            if (x2 !== undefined) {\n                x2 = Number((x2 + sX).toFixed(2));\n            }\n            if (y2 !== undefined) {\n                y2 = Number((y2 + sY).toFixed(2));\n            }\n        }\n        var scaledPath = { x: x, y: y, x1: x1, y1: y1, x2: x2, y2: y2, r1: seg.r1, r2: seg.r2 };\n        newSeg = updatedSegment(seg, char, scaledPath, s, sX, sY);\n        if (newSeg) {\n            arr[i] = newSeg;\n        }\n        // Record the start of a subpath\n        if (char === 'M' || char === 'm') {\n            x0 = x;\n            y0 = y;\n        }\n    }\n    var pathData = getPathString(arr);\n    return pathData;\n}\n/** @private */\nexport function updatedSegment(segment, char, obj, isScale, sX, sY) {\n    switch (char) {\n        case 'M':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            break;\n        case 'L':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            break;\n        case 'H':\n            segment.x = obj.x;\n            break;\n        case 'V':\n            segment.y = obj.y;\n            break;\n        case 'C':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.x1 = obj.x1;\n            segment.y1 = obj.y1;\n            segment.x2 = obj.x2;\n            segment.y2 = obj.y2;\n            break;\n        case 'S':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.x2 = obj.x2;\n            segment.y2 = obj.y2;\n            break;\n        case 'Q':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.x1 = obj.x1;\n            segment.y1 = obj.y1;\n            break;\n        case 'T':\n            segment.x = obj.x;\n            segment.y = obj.y;\n            break;\n        case 'A':\n            var r1 = obj.r1;\n            var r2 = obj.r2;\n            if (isScale) {\n                obj.r1 = r1 = (r1 * sX);\n                obj.r2 = r2 = (r2 * sY);\n            }\n            segment.x = obj.x;\n            segment.y = obj.y;\n            segment.r1 = obj.r1;\n            segment.r2 = obj.r2;\n            break;\n        case 'z':\n        case 'Z':\n            segment = { command: 'Z' };\n            break;\n    }\n    return segment;\n}\n/** @private */\nexport function scalePathData(val, scaleFactor, oldOffset, newOffset) {\n    if (val !== oldOffset) {\n        if (newOffset !== oldOffset) {\n            val = (((val * scaleFactor) - (Number(oldOffset) * scaleFactor - Number(oldOffset)))\n                + (newOffset - Number(oldOffset)));\n        }\n        else {\n            val = ((Number(val) * scaleFactor) - (Number(oldOffset) * scaleFactor - Number(oldOffset)));\n        }\n    }\n    else {\n        if (newOffset !== oldOffset) {\n            val = newOffset;\n        }\n    }\n    return Number(val.toFixed(2));\n}\n/** @private */\nexport function splitArrayCollection(arrayCollection) {\n    var x0;\n    var y0;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x;\n    var y;\n    var length;\n    var i;\n    for (x = 0, y = 0, i = 0, length = arrayCollection.length; i < length; ++i) {\n        var path = arrayCollection[i];\n        var seg = path;\n        var char = seg.command;\n        if (/[MLHVCSQTA]/.test(char)) {\n            if ('x' in seg) {\n                seg.x = x = seg.x;\n            }\n            if ('y' in seg) {\n                seg.y = y = seg.y;\n            }\n        }\n        else {\n            if ('x1' in seg) {\n                seg.x1 = x1 = x + seg.x1;\n            }\n            if ('x2' in seg) {\n                seg.x2 = x2 = x + seg.x2;\n            }\n            if ('y1' in seg) {\n                seg.y1 = y1 = y + seg.y1;\n            }\n            if ('y2' in seg) {\n                seg.y2 = y2 = y + seg.y2;\n            }\n            if ('x' in seg) {\n                seg.x = x += seg.x;\n            }\n            if ('y' in seg) {\n                seg.y = y += seg.y;\n            }\n            var newSeg = void 0;\n            switch (char) {\n                case 'm':\n                case 'M':\n                    newSeg = { command: 'M', x: x, y: y };\n                    break;\n                case 'l':\n                case 'L':\n                    newSeg = { command: 'L', x: x, y: y };\n                    break;\n                case 'h':\n                case 'H':\n                    newSeg = { command: 'H', x: x };\n                    break;\n                case 'v':\n                case 'V':\n                    newSeg = { command: 'V', y: y };\n                    break;\n                case 'c':\n                case 'C':\n                    newSeg = { command: 'C', x: x, y: y, x1: x1, y1: y1, x2: x2, y2: y2 };\n                    break;\n                case 's':\n                case 'S':\n                    newSeg = { command: 'S', x: x, y: y, x2: x2, y2: y2 };\n                    break;\n                case 'q':\n                case 'Q':\n                    newSeg = { command: 'Q', x: x, y: y, x1: x1, y1: y1 };\n                    break;\n                case 't':\n                case 'T':\n                    newSeg = { command: 'T', x: x, y: y };\n                    break;\n                case 'a':\n                case 'A':\n                    newSeg = { command: 'A', x: x, y: y };\n                    newSeg.r1 = seg.r1;\n                    newSeg.r2 = seg.r2;\n                    newSeg.angle = seg.angle;\n                    newSeg.largeArc = seg.largeArc;\n                    newSeg.sweep = seg.sweep;\n                    break;\n                case 'z':\n                case 'Z':\n                    newSeg = { command: 'Z' };\n                    x = x0;\n                    y = y0;\n                    newSeg = arrayCollection[i];\n                    break;\n            }\n            if (newSeg) {\n                arrayCollection[i] = newSeg;\n            }\n        }\n        if (char === 'M' || char === 'm') {\n            x0 = x;\n            y0 = y;\n        }\n    }\n    return arrayCollection;\n}\n/** @private */\nexport function getPathString(arrayCollection) {\n    var getNewString = '';\n    var i;\n    for (i = 0; i < arrayCollection.length; i++) {\n        if (i === 0) {\n            getNewString += getString(arrayCollection[i]);\n        }\n        else {\n            getNewString += ' ' + getString(arrayCollection[i]);\n        }\n    }\n    return getNewString;\n}\n/** @private */\nexport function getString(obj) {\n    var string = '';\n    switch (obj.command) {\n        case 'Z':\n        case 'z':\n            string = obj.command;\n            break;\n        case 'M':\n        case 'm':\n        case 'L':\n        case 'l':\n            string = obj.command + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'C':\n        case 'c':\n            string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'Q':\n        case 'q':\n            string = obj.command + ' ' + obj.x1 + ' ' + obj.y1 + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'A':\n        case 'a':\n            var cmd = obj.command;\n            var ang = obj.angle;\n            var l = (obj.largeArc ? '1' : '0');\n            var s = (obj.sweep ? '1' : '0');\n            string = cmd + ' ' + obj.r1 + ' ' + obj.r2 + ' ' + ang + ' ' + l + ' ' + s + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'H':\n        case 'h':\n            string = obj.command + ' ' + obj.x;\n            break;\n        case 'V':\n        case 'v':\n            string = obj.command + ' ' + obj.y;\n            break;\n        case 'S':\n        case 's':\n            string = obj.command + ' ' + obj.x2 + ' ' + obj.y2 + ' ' + obj.x + ' ' + obj.y;\n            break;\n        case 'T':\n        case 't':\n            string = obj.command + ' ' + obj.x + ' ' + obj.y;\n    }\n    return string;\n}\n"],"mappings":"AAAA;AACA;AACA;;AACA;AACA,OAAO,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;EAClC,IAAIC,UAAU,GAAG,EAAjB;EACA,IAAIC,CAAJ;EACA,IAAIC,eAAe,GAAGC,aAAa,CAACJ,IAAD,CAAnC;;EACA,IAAIG,eAAe,CAACE,MAAhB,GAAyB,CAA7B,EAAgC;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,eAAe,CAACE,MAApC,EAA4CC,CAAC,EAA7C,EAAiD;MAC7C,IAAIC,EAAE,GAAGJ,eAAe,CAACG,CAAD,CAAxB;MACA,IAAIE,IAAI,GAAG,EAAX;MACAA,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAT;;MACA,QAAQC,IAAI,CAACC,WAAL,EAAR;QACI,KAAK,GAAL;UACI,KAAKP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cAAEC,OAAO,EAAEH,IAAX;cAAiBI,CAAC,EAAEL,EAAE,CAACL,CAAD,CAAtB;cAA2BW,CAAC,EAAEN,EAAE,CAACL,CAAC,GAAG,CAAL;YAAhC,CAAhB;YACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;;YACA,IAAIM,IAAI,KAAK,GAAb,EAAkB;cACdA,IAAI,GAAG,GAAP;YACH,CAFD,MAGK,IAAIA,IAAI,KAAK,GAAb,EAAkB;cACnBA,IAAI,GAAG,GAAP;YACH;UACJ;;UACD;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACI,KAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cAAEC,OAAO,EAAEH,IAAX;cAAiBI,CAAC,EAAEL,EAAE,CAACL,CAAD,CAAtB;cAA2BW,CAAC,EAAEN,EAAE,CAACL,CAAC,GAAG,CAAL;YAAhC,CAAhB;YACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACH;;UACD;;QACJ,KAAK,GAAL;UACI,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cAAEC,OAAO,EAAEH,IAAX;cAAiBI,CAAC,EAAEL,EAAE,CAACL,CAAD;YAAtB,CAAhB;UACH;;UACD;;QACJ,KAAK,GAAL;UACI,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cAAEC,OAAO,EAAEH,IAAX;cAAiBK,CAAC,EAAEN,EAAE,CAACL,CAAD;YAAtB,CAAhB;UACH;;UACD;;QACJ,KAAK,GAAL;UACID,UAAU,CAACS,IAAX,CAAgB;YAAEC,OAAO,EAAEH;UAAX,CAAhB;UACA;;QACJ,KAAK,GAAL;UACI,KAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cACZC,OAAO,EAAEH,IADG;cACGM,EAAE,EAAEP,EAAE,CAACL,CAAD,CADT;cACca,EAAE,EAAER,EAAE,CAACL,CAAC,GAAG,CAAL,CADpB;cAC6Bc,EAAE,EAAET,EAAE,CAACL,CAAC,GAAG,CAAL,CADnC;cAC4Ce,EAAE,EAAEV,EAAE,CAACL,CAAC,GAAG,CAAL,CADlD;cAC2DU,CAAC,EAAEL,EAAE,CAACL,CAAC,GAAG,CAAL,CADhE;cACyEW,CAAC,EAAEN,EAAE,CAACL,CAAC,GAAG,CAAL;YAD9E,CAAhB;YAGAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACH;;UACD;;QACJ,KAAK,GAAL;UACI,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cAAEC,OAAO,EAAEH,IAAX;cAAiBQ,EAAE,EAAET,EAAE,CAACL,CAAD,CAAvB;cAA4Be,EAAE,EAAEV,EAAE,CAACL,CAAC,GAAG,CAAL,CAAlC;cAA2CU,CAAC,EAAEL,EAAE,CAACL,CAAC,GAAG,CAAL,CAAhD;cAAyDW,CAAC,EAAEN,EAAE,CAACL,CAAC,GAAG,CAAL;YAA9D,CAAhB;YACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACH;;UACD;;QACJ,KAAK,GAAL;UACI,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cAAEC,OAAO,EAAEH,IAAX;cAAiBM,EAAE,EAAEP,EAAE,CAACL,CAAD,CAAvB;cAA4Ba,EAAE,EAAER,EAAE,CAACL,CAAC,GAAG,CAAL,CAAlC;cAA2CU,CAAC,EAAEL,EAAE,CAACL,CAAC,GAAG,CAAL,CAAhD;cAAyDW,CAAC,EAAEN,EAAE,CAACL,CAAC,GAAG,CAAL;YAA9D,CAAhB;YACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACH;;UACD;;QACJ,KAAK,GAAL;UACI,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGK,EAAE,CAACF,MAAnB,EAA2BH,CAAC,EAA5B,EAAgC;YAC5BD,UAAU,CAACS,IAAX,CAAgB;cACZC,OAAO,EAAEH,IADG;cACGU,EAAE,EAAEX,EAAE,CAACL,CAAD,CADT;cACciB,EAAE,EAAEZ,EAAE,CAACL,CAAC,GAAG,CAAL,CADpB;cAC6BkB,KAAK,EAAEb,EAAE,CAACL,CAAC,GAAG,CAAL,CADtC;cAC+CmB,QAAQ,EAAEd,EAAE,CAACL,CAAC,GAAG,CAAL,CAD3D;cAEZoB,KAAK,EAAEf,EAAE,CAACL,CAAC,GAAG,CAAL,CAFG;cAEMU,CAAC,EAAEL,EAAE,CAACL,CAAC,GAAG,CAAL,CAFX;cAEoBW,CAAC,EAAEN,EAAE,CAACL,CAAC,GAAG,CAAL;YAFzB,CAAhB;YAIAA,CAAC,GAAGA,CAAC,GAAG,CAAR;UACH;;UACD;MA7DR;IA+DH;EACJ;;EACD,OAAOD,UAAP;AACH;AACD;;AACA,OAAO,SAASG,aAAT,CAAuBJ,IAAvB,EAA6B;EAChC,IAAIuB,SAAS,GAAG,uCAAhB;EACA,IAAIC,OAAO,GAAG,EAAd;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,KAAK,GAAG,EAAZ;EACAH,SAAS,CAACI,SAAV,GAAsB,CAAtB;EACA,IAAIC,aAAa,GAAG,KAApB;EACAF,KAAK,GAAGH,SAAS,CAACM,IAAV,CAAe7B,IAAf,CAAR;;EACA,OAAO0B,KAAP,EAAc;IACV,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;MAClB,IAAII,EAAE,GAAG,EAAT;MACAF,aAAa,GAAG,IAAhB;IACH,CAHD,MAIK,IAAIF,KAAK,CAAC,CAAD,CAAT,EAAc;MACf,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASjB,WAAT,OAA2B,IAA/B,EAAqC;QACjC,IAAIe,OAAO,CAACnB,MAAZ,EAAoB;UAChBoB,QAAQ,CAACf,IAAT,CAAcc,OAAd;QACH;;QACDC,QAAQ,CAACf,IAAT,CAAc,CAAC,GAAD,CAAd;QACAc,OAAO,GAAG,CAACE,KAAK,CAAC,CAAD,CAAL,CAASK,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAD,CAAV;MACH,CAND,MAOK;QACD,IAAIP,OAAO,CAACnB,MAAZ,EAAoB;UAChBoB,QAAQ,CAACf,IAAT,CAAcc,OAAd;QACH;;QACDA,OAAO,GAAG,CAACE,KAAK,CAAC,CAAD,CAAN,CAAV;MACH;;MACDE,aAAa,GAAG,KAAhB;IACH,CAfI,MAgBA;MACD,IAAI,CAACJ,OAAO,CAACnB,MAAb,EAAqB;QACjBmB,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,CAACI,aAAL,EAAoB;QAChBJ,OAAO,CAACd,IAAR,CAAasB,MAAM,CAACN,KAAK,CAAC,CAAD,CAAN,CAAnB;MACH;;MACDE,aAAa,GAAG,KAAhB;IACH;;IACDF,KAAK,GAAGH,SAAS,CAACM,IAAV,CAAe7B,IAAf,CAAR;EACH;;EACD,IAAIwB,OAAO,CAACnB,MAAZ,EAAoB;IAChBoB,QAAQ,CAACf,IAAT,CAAcc,OAAd;EACH;;EACD,OAAOC,QAAP;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASQ,gBAAT,CAA0BC,YAA1B,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuD;EAC1D,IAAIxB,CAAC,GAAG,CAAR;EACA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIwB,IAAI,GAAG,EAAX;EACA,IAAIC,MAAM,GAAG,CAAC;IAAE1B,CAAC,EAAEA,CAAC,GAAGsB,YAAT;IAAuBrB,CAAC,EAAEA;EAA1B,CAAD,EAAgC;IAAED,CAAC,EAAEA,CAAC,GAAGwB,KAAJ,GAAYF,YAAjB;IAA+BrB,CAAC,EAAEA;EAAlC,CAAhC,EACT;IAAED,CAAC,EAAEA,CAAC,GAAGwB,KAAT;IAAgBvB,CAAC,EAAEA,CAAC,GAAGqB;EAAvB,CADS,EAC8B;IAAEtB,CAAC,EAAEA,CAAC,GAAGwB,KAAT;IAAgBvB,CAAC,EAAEA,CAAC,GAAGsB,MAAJ,GAAaD;EAAhC,CAD9B,EAET;IAAEtB,CAAC,EAAEA,CAAC,GAAGwB,KAAJ,GAAYF,YAAjB;IAA+BrB,CAAC,EAAEA,CAAC,GAAGsB;EAAtC,CAFS,EAEuC;IAAEvB,CAAC,EAAEA,CAAC,GAAGsB,YAAT;IAAuBrB,CAAC,EAAEA,CAAC,GAAGsB;EAA9B,CAFvC,EAGT;IAAEvB,CAAC,EAAEA,CAAL;IAAQC,CAAC,EAAEA,CAAC,GAAGsB,MAAJ,GAAaD;EAAxB,CAHS,EAG+B;IAAEtB,CAAC,EAAEA,CAAL;IAAQC,CAAC,EAAEA,CAAC,GAAGqB;EAAf,CAH/B,CAAb;EAKA,IAAIK,OAAO,GAAG,CAAC;IAAE3B,CAAC,EAAEA,CAAC,GAAGwB,KAAT;IAAgBvB,CAAC,EAAEA;EAAnB,CAAD,EAAyB;IAAED,CAAC,EAAEA,CAAC,GAAGwB,KAAT;IAAgBvB,CAAC,EAAEA,CAAC,GAAGsB;EAAvB,CAAzB,EAA0D;IAAEvB,CAAC,EAAEA,CAAL;IAAQC,CAAC,EAAEA,CAAC,GAAGsB;EAAf,CAA1D,EAAmF;IAAEvB,CAAC,EAAEA,CAAL;IAAQC,CAAC,EAAEA;EAAX,CAAnF,CAAd;EACA,IAAI2B,MAAM,GAAG,CAAb;EACA,IAAIC,MAAJ;EACA,IAAIC,IAAJ;EACAL,IAAI,GAAG,MAAMC,MAAM,CAAC,CAAD,CAAN,CAAU1B,CAAhB,GAAoB,GAApB,GAA0B0B,MAAM,CAAC,CAAD,CAAN,CAAUzB,CAA3C;EACA,IAAIP,CAAJ;;EACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgC,MAAM,CAACjC,MAAvB,EAA+BC,CAAC,GAAGA,CAAC,GAAG,CAAvC,EAA0C;IACtCmC,MAAM,GAAGH,MAAM,CAAChC,CAAC,GAAG,CAAL,CAAf;IACA+B,IAAI,IAAI,MAAMI,MAAM,CAAC7B,CAAb,GAAiB,GAAjB,GAAuB6B,MAAM,CAAC5B,CAAtC;IACA6B,IAAI,GAAGJ,MAAM,CAAChC,CAAC,GAAG,CAAL,CAAN,IAAiBgC,MAAM,CAAC,CAAD,CAA9B;IACAD,IAAI,IAAI,MAAME,OAAO,CAACC,MAAD,CAAP,CAAgB5B,CAAtB,GAA0B,GAA1B,GAAgC2B,OAAO,CAACC,MAAD,CAAP,CAAgB3B,CAAhD,GAAoD,GAApD,GAA0D6B,IAAI,CAAC9B,CAA/D,GAAmE,GAAnE,GAAyE8B,IAAI,CAAC7B,CAAtF;IACA2B,MAAM;EACT;;EACD,OAAOH,IAAP;AACH;AACD;;AACA,OAAO,SAASM,qBAAT,CAA+B1C,UAA/B,EAA2C;EAC9C,IAAI2C,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAI/B,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIL,CAAJ;EACA,IAAIC,CAAJ;EACA,IAAIR,MAAJ;EACA,IAAIC,CAAJ;EACA,IAAIwC,KAAJ;EACA,IAAIC,KAAJ;EACA,IAAIC,QAAQ,GAAG,EAAf;;EACA,KAAKpC,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcP,CAAC,GAAG,CAAlB,EAAqBD,MAAM,GAAGJ,UAAU,CAACI,MAA9C,EAAsDC,CAAC,GAAGD,MAA1D,EAAkE,EAAEC,CAApE,EAAuE;IACnE,IAAI2C,GAAG,GAAGhD,UAAU,CAACK,CAAD,CAApB;IACA,IAAI4C,GAAG,GAAGD,GAAV;IACA,IAAIzC,IAAI,GAAG,EAAX;IACAA,IAAI,GAAG0C,GAAG,CAACvC,OAAX;;IACA,IAAI,QAAQuC,GAAZ,EAAiB;MACbnC,EAAE,GAAGmC,GAAG,CAACnC,EAAT;IACH;;IACD,IAAI,QAAQmC,GAAZ,EAAiB;MACbjC,EAAE,GAAGiC,GAAG,CAACjC,EAAT;IACH;;IACD,IAAI,QAAQiC,GAAZ,EAAiB;MACbpC,EAAE,GAAGoC,GAAG,CAACpC,EAAT;IACH;;IACD,IAAI,QAAQoC,GAAZ,EAAiB;MACblC,EAAE,GAAGkC,GAAG,CAAClC,EAAT;IACH;;IACD,IAAI,OAAOkC,GAAX,EAAgB;MACZtC,CAAC,GAAGsC,GAAG,CAACtC,CAAR;IACH;;IACD,IAAI,OAAOsC,GAAX,EAAgB;MACZrC,CAAC,GAAGqC,GAAG,CAACrC,CAAR;IACH;;IACD,IAAIsC,IAAI,GAAGH,QAAQ,CAACA,QAAQ,CAAC3C,MAAT,GAAkB,CAAnB,CAAnB;;IACA,QAAQG,IAAR;MACI,KAAK,GAAL;QACIwC,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE,GAAX;UAAgBC,CAAC,EAAEA,CAAnB;UAAsBC,CAAC,EAAEA;QAAzB,CAAd;QACA;;MACJ,KAAK,GAAL;QACImC,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE,GAAX;UAAgBiC,EAAE,EAAEA,EAApB;UAAwBC,EAAE,EAAEA,EAA5B;UAAgCjC,CAAC,EAAEA,CAAnC;UAAsCC,CAAC,EAAEA;QAAzC,CAAd;QACA;;MACJ,KAAK,GAAL;QACImC,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE,GAAX;UAAgBiC,EAAE,EAAEA,EAApB;UAAwBC,EAAE,EAAEA,EAA5B;UAAgCjC,CAAC,EAAEA,CAAnC;UAAsCC,CAAC,EAAEgC;QAAzC,CAAd;QACA;;MACJ,KAAK,GAAL;QACIG,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE,GAAX;UAAgBiC,EAAE,EAAEA,EAApB;UAAwBC,EAAE,EAAEA,EAA5B;UAAgCjC,CAAC,EAAEgC,EAAnC;UAAuC/B,CAAC,EAAEA;QAA1C,CAAd;QACA;;MACJ,KAAK,GAAL;QACImC,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE,GAAX;UAAgBiC,EAAE,EAAEA,EAApB;UAAwBC,EAAE,EAAEA,EAA5B;UAAgC/B,EAAE,EAAEA,EAApC;UAAwCC,EAAE,EAAEA,EAA5C;UAAgDC,EAAE,EAAEA,EAApD;UAAwDC,EAAE,EAAEA,EAA5D;UAAgEL,CAAC,EAAEA,CAAnE;UAAsEC,CAAC,EAAEA;QAAzE,CAAd;QACA;;MACJ,KAAK,GAAL;QACI,IAAIsC,IAAJ,EAAU;UACN,IAAIC,IAAI,GAAG,KAAK,CAAhB;;UACA,IAAID,IAAI,CAACxC,OAAL,KAAiB,GAAjB,IAAwBwC,IAAI,CAACxC,OAAL,KAAiB,GAA7C,EAAkD;YAC9CyC,IAAI,GAAG;cAAExC,CAAC,EAAEuC,IAAI,CAACnC,EAAV;cAAcH,CAAC,EAAEsC,IAAI,CAAClC;YAAtB,CAAP;UACH,CAFD,MAGK;YACDmC,IAAI,GAAG;cAAExC,CAAC,EAAEgC,EAAL;cAAS/B,CAAC,EAAEgC;YAAZ,CAAP;UACH;;UACD,IAAIQ,IAAI,GAAG;YAAEzC,CAAC,EAAE,IAAIgC,EAAJ,GAASQ,IAAI,CAACxC,CAAnB;YAAsBC,CAAC,EAAE,IAAIgC,EAAJ,GAASO,IAAI,CAACvC;UAAvC,CAAX;UACAmC,QAAQ,CAACtC,IAAT,CAAc;YAAEC,OAAO,EAAE,GAAX;YAAgBiC,EAAE,EAAEA,EAApB;YAAwBC,EAAE,EAAEA,EAA5B;YAAgC/B,EAAE,EAAEuC,IAAI,CAACzC,CAAzC;YAA4CG,EAAE,EAAEsC,IAAI,CAACxC,CAArD;YAAwDG,EAAE,EAAEA,EAA5D;YAAgEC,EAAE,EAAEA,EAApE;YAAwEL,CAAC,EAAEA,CAA3E;YAA8EC,CAAC,EAAEA;UAAjF,CAAd;QACH;;QACD;;MACJ,KAAK,GAAL;QACI;QACAmC,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE,GAAX;UAAgBiC,EAAE,EAAEA,EAApB;UAAwBC,EAAE,EAAEA,EAA5B;UAAgC/B,EAAE,EAAEA,EAApC;UAAwCC,EAAE,EAAEA,EAA5C;UAAgDH,CAAC,EAAEA,CAAnD;UAAsDC,CAAC,EAAEA;QAAzD,CAAd;QACA;;MACJ,KAAK,GAAL;QACI,IAAIsC,IAAJ,EAAU;UACN,IAAIC,IAAI,GAAG,KAAK,CAAhB;;UACA,IAAID,IAAI,CAACxC,OAAL,KAAiB,GAArB,EAA0B;YACtByC,IAAI,GAAG;cAAExC,CAAC,EAAEuC,IAAI,CAACrC,EAAV;cAAcD,CAAC,EAAEsC,IAAI,CAACpC;YAAtB,CAAP;UACH,CAFD,MAGK;YACDqC,IAAI,GAAG;cAAExC,CAAC,EAAEgC,EAAL;cAAS/B,CAAC,EAAEgC;YAAZ,CAAP;UACH;;UACD,IAAIQ,IAAI,GAAG;YAAEzC,CAAC,EAAE,IAAIgC,EAAJ,GAASQ,IAAI,CAACxC,CAAnB;YAAsBC,CAAC,EAAE,IAAIgC,EAAJ,GAASO,IAAI,CAACvC;UAAvC,CAAX;UACAmC,QAAQ,CAACtC,IAAT,CAAc;YAAEC,OAAO,EAAE,GAAX;YAAgBiC,EAAE,EAAEA,EAApB;YAAwBC,EAAE,EAAEA,EAA5B;YAAgC/B,EAAE,EAAEuC,IAAI,CAACzC,CAAzC;YAA4CG,EAAE,EAAEsC,IAAI,CAACxC,CAArD;YAAwDD,CAAC,EAAEA,CAA3D;YAA8DC,CAAC,EAAEA;UAAjE,CAAd;QACH;;QACD;;MACJ,KAAK,GAAL;QACI,IAAIyC,MAAM,GAAGJ,GAAb;QACAI,MAAM,CAAC3C,OAAP,GAAiB,GAAjB;QACAqC,QAAQ,CAACtC,IAAT,CAAc4C,MAAd;QACA;;MACJ,KAAK,GAAL;MACA,KAAK,GAAL;QACIN,QAAQ,CAACtC,IAAT,CAAc;UAAEC,OAAO,EAAE;QAAX,CAAd;QACAC,CAAC,GAAGgC,EAAJ;QACA/B,CAAC,GAAGgC,EAAJ;QACA;IAxDR;;IA0DA,IAAIrC,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;MAC9BsC,KAAK,GAAGlC,CAAR;MACAmC,KAAK,GAAGlC,CAAR;IACH;;IACD+B,EAAE,GAAGhC,CAAL;IACAiC,EAAE,GAAGhC,CAAL;EACH;;EACD,OAAOmC,QAAP;AACH;AACD;;AACA,OAAO,SAASO,aAAT,CAAuBC,GAAvB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,CAApC,EAAuCC,EAAvC,EAA2CC,EAA3C,EAA+CC,EAA/C,EAAmDC,EAAnD,EAAuD;EAC1D,IAAInB,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAI/B,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIL,CAAJ;EACA,IAAIC,CAAJ;EACA,IAAIR,MAAJ;EACA,IAAIC,CAAJ;EACA,IAAIgD,MAAJ;;EACA,KAAK1C,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcP,CAAC,GAAG,CAAlB,EAAqBD,MAAM,GAAGmD,GAAG,CAACnD,MAAvC,EAA+CC,CAAC,GAAGD,MAAnD,EAA2D,EAAEC,CAA7D,EAAgE;IAC5D,IAAI2C,GAAG,GAAGO,GAAG,CAAClD,CAAD,CAAb;IACA,IAAI4C,GAAG,GAAGD,GAAV;IACA,IAAIzC,IAAI,GAAG0C,GAAG,CAACvC,OAAf;;IACA,IAAI,OAAOuC,GAAX,EAAgB;MACZtC,CAAC,GAAGsC,GAAG,CAACtC,CAAR;IACH;;IACD,IAAI,OAAOsC,GAAX,EAAgB;MACZrC,CAAC,GAAGqC,GAAG,CAACrC,CAAR;IACH;;IACD,IAAI,QAAQqC,GAAZ,EAAiB;MACbnC,EAAE,GAAGmC,GAAG,CAACnC,EAAT;IACH;;IACD,IAAI,QAAQmC,GAAZ,EAAiB;MACbjC,EAAE,GAAGiC,GAAG,CAACjC,EAAT;IACH;;IACD,IAAI,QAAQiC,GAAZ,EAAiB;MACbpC,EAAE,GAAGoC,GAAG,CAACpC,EAAT;IACH;;IACD,IAAI,QAAQoC,GAAZ,EAAiB;MACblC,EAAE,GAAGkC,GAAG,CAAClC,EAAT;IACH;;IACD,IAAI2C,CAAJ,EAAO;MACH,IAAI/C,CAAC,KAAKoD,SAAV,EAAqB;QACjBpD,CAAC,GAAGqD,aAAa,CAACrD,CAAD,EAAI6C,EAAJ,EAAQG,EAAR,EAAYE,EAAZ,CAAjB;MACH;;MACD,IAAIjD,CAAC,KAAKmD,SAAV,EAAqB;QACjBnD,CAAC,GAAGoD,aAAa,CAACpD,CAAD,EAAI6C,EAAJ,EAAQG,EAAR,EAAYE,EAAZ,CAAjB;MACH;;MACD,IAAIjD,EAAE,KAAKkD,SAAX,EAAsB;QAClBlD,EAAE,GAAGmD,aAAa,CAACnD,EAAD,EAAK2C,EAAL,EAASG,EAAT,EAAaE,EAAb,CAAlB;MACH;;MACD,IAAI/C,EAAE,KAAKiD,SAAX,EAAsB;QAClBjD,EAAE,GAAGkD,aAAa,CAAClD,EAAD,EAAK2C,EAAL,EAASG,EAAT,EAAaE,EAAb,CAAlB;MACH;;MACD,IAAI/C,EAAE,KAAKgD,SAAX,EAAsB;QAClBhD,EAAE,GAAGiD,aAAa,CAACjD,EAAD,EAAKyC,EAAL,EAASG,EAAT,EAAaE,EAAb,CAAlB;MACH;;MACD,IAAI7C,EAAE,KAAK+C,SAAX,EAAsB;QAClB/C,EAAE,GAAGgD,aAAa,CAAChD,EAAD,EAAKyC,EAAL,EAASG,EAAT,EAAaE,EAAb,CAAlB;MACH;IACJ,CAnBD,MAoBK;MACD,IAAInD,CAAC,KAAKoD,SAAV,EAAqB;QACjBpD,CAAC,GAAGoB,MAAM,CAAC,CAACpB,CAAC,GAAG6C,EAAL,EAASS,OAAT,CAAiB,CAAjB,CAAD,CAAV;MACH;;MACD,IAAIrD,CAAC,KAAKmD,SAAV,EAAqB;QACjBnD,CAAC,GAAGmB,MAAM,CAAC,CAACnB,CAAC,GAAG6C,EAAL,EAASQ,OAAT,CAAiB,CAAjB,CAAD,CAAV;MACH;;MACD,IAAIpD,EAAE,KAAKkD,SAAX,EAAsB;QAClBlD,EAAE,GAAGkB,MAAM,CAAC,CAAClB,EAAE,GAAG2C,EAAN,EAAUS,OAAV,CAAkB,CAAlB,CAAD,CAAX;MACH;;MACD,IAAInD,EAAE,KAAKiD,SAAX,EAAsB;QAClBjD,EAAE,GAAGiB,MAAM,CAAC,CAACjB,EAAE,GAAG2C,EAAN,EAAUQ,OAAV,CAAkB,CAAlB,CAAD,CAAX;MACH;;MACD,IAAIlD,EAAE,KAAKgD,SAAX,EAAsB;QAClBhD,EAAE,GAAGgB,MAAM,CAAC,CAAChB,EAAE,GAAGyC,EAAN,EAAUS,OAAV,CAAkB,CAAlB,CAAD,CAAX;MACH;;MACD,IAAIjD,EAAE,KAAK+C,SAAX,EAAsB;QAClB/C,EAAE,GAAGe,MAAM,CAAC,CAACf,EAAE,GAAGyC,EAAN,EAAUQ,OAAV,CAAkB,CAAlB,CAAD,CAAX;MACH;IACJ;;IACD,IAAIC,UAAU,GAAG;MAAEvD,CAAC,EAAEA,CAAL;MAAQC,CAAC,EAAEA,CAAX;MAAcC,EAAE,EAAEA,EAAlB;MAAsBC,EAAE,EAAEA,EAA1B;MAA8BC,EAAE,EAAEA,EAAlC;MAAsCC,EAAE,EAAEA,EAA1C;MAA8CC,EAAE,EAAEgC,GAAG,CAAChC,EAAtD;MAA0DC,EAAE,EAAE+B,GAAG,CAAC/B;IAAlE,CAAjB;IACAmC,MAAM,GAAGc,cAAc,CAAClB,GAAD,EAAM1C,IAAN,EAAY2D,UAAZ,EAAwBR,CAAxB,EAA2BF,EAA3B,EAA+BC,EAA/B,CAAvB;;IACA,IAAIJ,MAAJ,EAAY;MACRE,GAAG,CAAClD,CAAD,CAAH,GAASgD,MAAT;IACH,CAlE2D,CAmE5D;;;IACA,IAAI9C,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;MAC9BoC,EAAE,GAAGhC,CAAL;MACAiC,EAAE,GAAGhC,CAAL;IACH;EACJ;;EACD,IAAIwD,QAAQ,GAAGC,aAAa,CAACd,GAAD,CAA5B;EACA,OAAOa,QAAP;AACH;AACD;;AACA,OAAO,SAASD,cAAT,CAAwBG,OAAxB,EAAiC/D,IAAjC,EAAuCyC,GAAvC,EAA4CuB,OAA5C,EAAqDf,EAArD,EAAyDC,EAAzD,EAA6D;EAChE,QAAQlD,IAAR;IACI,KAAK,GAAL;MACI+D,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA;;IACJ,KAAK,GAAL;MACI0D,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA;;IACJ,KAAK,GAAL;MACI0D,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA;;IACJ,KAAK,GAAL;MACI2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA;;IACJ,KAAK,GAAL;MACI0D,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA0D,OAAO,CAACzD,EAAR,GAAamC,GAAG,CAACnC,EAAjB;MACAyD,OAAO,CAACxD,EAAR,GAAakC,GAAG,CAAClC,EAAjB;MACAwD,OAAO,CAACvD,EAAR,GAAaiC,GAAG,CAACjC,EAAjB;MACAuD,OAAO,CAACtD,EAAR,GAAagC,GAAG,CAAChC,EAAjB;MACA;;IACJ,KAAK,GAAL;MACIsD,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA0D,OAAO,CAACvD,EAAR,GAAaiC,GAAG,CAACjC,EAAjB;MACAuD,OAAO,CAACtD,EAAR,GAAagC,GAAG,CAAChC,EAAjB;MACA;;IACJ,KAAK,GAAL;MACIsD,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA0D,OAAO,CAACzD,EAAR,GAAamC,GAAG,CAACnC,EAAjB;MACAyD,OAAO,CAACxD,EAAR,GAAakC,GAAG,CAAClC,EAAjB;MACA;;IACJ,KAAK,GAAL;MACIwD,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA;;IACJ,KAAK,GAAL;MACI,IAAIK,EAAE,GAAG+B,GAAG,CAAC/B,EAAb;MACA,IAAIC,EAAE,GAAG8B,GAAG,CAAC9B,EAAb;;MACA,IAAIqD,OAAJ,EAAa;QACTvB,GAAG,CAAC/B,EAAJ,GAASA,EAAE,GAAIA,EAAE,GAAGuC,EAApB;QACAR,GAAG,CAAC9B,EAAJ,GAASA,EAAE,GAAIA,EAAE,GAAGuC,EAApB;MACH;;MACDa,OAAO,CAAC3D,CAAR,GAAYqC,GAAG,CAACrC,CAAhB;MACA2D,OAAO,CAAC1D,CAAR,GAAYoC,GAAG,CAACpC,CAAhB;MACA0D,OAAO,CAACrD,EAAR,GAAa+B,GAAG,CAAC/B,EAAjB;MACAqD,OAAO,CAACpD,EAAR,GAAa8B,GAAG,CAAC9B,EAAjB;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIoD,OAAO,GAAG;QAAE5D,OAAO,EAAE;MAAX,CAAV;MACA;EAtDR;;EAwDA,OAAO4D,OAAP;AACH;AACD;;AACA,OAAO,SAASN,aAAT,CAAuBQ,GAAvB,EAA4BC,WAA5B,EAAyCC,SAAzC,EAAoDC,SAApD,EAA+D;EAClE,IAAIH,GAAG,KAAKE,SAAZ,EAAuB;IACnB,IAAIC,SAAS,KAAKD,SAAlB,EAA6B;MACzBF,GAAG,GAAMA,GAAG,GAAGC,WAAP,IAAuB1C,MAAM,CAAC2C,SAAD,CAAN,GAAoBD,WAApB,GAAkC1C,MAAM,CAAC2C,SAAD,CAA/D,CAAD,IACAC,SAAS,GAAG5C,MAAM,CAAC2C,SAAD,CADlB,CAAP;IAEH,CAHD,MAIK;MACDF,GAAG,GAAKzC,MAAM,CAACyC,GAAD,CAAN,GAAcC,WAAf,IAA+B1C,MAAM,CAAC2C,SAAD,CAAN,GAAoBD,WAApB,GAAkC1C,MAAM,CAAC2C,SAAD,CAAvE,CAAP;IACH;EACJ,CARD,MASK;IACD,IAAIC,SAAS,KAAKD,SAAlB,EAA6B;MACzBF,GAAG,GAAGG,SAAN;IACH;EACJ;;EACD,OAAO5C,MAAM,CAACyC,GAAG,CAACP,OAAJ,CAAY,CAAZ,CAAD,CAAb;AACH;AACD;;AACA,OAAO,SAASW,oBAAT,CAA8B1E,eAA9B,EAA+C;EAClD,IAAIyC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAI/B,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIC,EAAJ;EACA,IAAIL,CAAJ;EACA,IAAIC,CAAJ;EACA,IAAIR,MAAJ;EACA,IAAIC,CAAJ;;EACA,KAAKM,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcP,CAAC,GAAG,CAAlB,EAAqBD,MAAM,GAAGF,eAAe,CAACE,MAAnD,EAA2DC,CAAC,GAAGD,MAA/D,EAAuE,EAAEC,CAAzE,EAA4E;IACxE,IAAI+B,IAAI,GAAGlC,eAAe,CAACG,CAAD,CAA1B;IACA,IAAI4C,GAAG,GAAGb,IAAV;IACA,IAAI7B,IAAI,GAAG0C,GAAG,CAACvC,OAAf;;IACA,IAAI,cAAcmE,IAAd,CAAmBtE,IAAnB,CAAJ,EAA8B;MAC1B,IAAI,OAAO0C,GAAX,EAAgB;QACZA,GAAG,CAACtC,CAAJ,GAAQA,CAAC,GAAGsC,GAAG,CAACtC,CAAhB;MACH;;MACD,IAAI,OAAOsC,GAAX,EAAgB;QACZA,GAAG,CAACrC,CAAJ,GAAQA,CAAC,GAAGqC,GAAG,CAACrC,CAAhB;MACH;IACJ,CAPD,MAQK;MACD,IAAI,QAAQqC,GAAZ,EAAiB;QACbA,GAAG,CAACpC,EAAJ,GAASA,EAAE,GAAGF,CAAC,GAAGsC,GAAG,CAACpC,EAAtB;MACH;;MACD,IAAI,QAAQoC,GAAZ,EAAiB;QACbA,GAAG,CAAClC,EAAJ,GAASA,EAAE,GAAGJ,CAAC,GAAGsC,GAAG,CAAClC,EAAtB;MACH;;MACD,IAAI,QAAQkC,GAAZ,EAAiB;QACbA,GAAG,CAACnC,EAAJ,GAASA,EAAE,GAAGF,CAAC,GAAGqC,GAAG,CAACnC,EAAtB;MACH;;MACD,IAAI,QAAQmC,GAAZ,EAAiB;QACbA,GAAG,CAACjC,EAAJ,GAASA,EAAE,GAAGJ,CAAC,GAAGqC,GAAG,CAACjC,EAAtB;MACH;;MACD,IAAI,OAAOiC,GAAX,EAAgB;QACZA,GAAG,CAACtC,CAAJ,GAAQA,CAAC,IAAIsC,GAAG,CAACtC,CAAjB;MACH;;MACD,IAAI,OAAOsC,GAAX,EAAgB;QACZA,GAAG,CAACrC,CAAJ,GAAQA,CAAC,IAAIqC,GAAG,CAACrC,CAAjB;MACH;;MACD,IAAIyC,MAAM,GAAG,KAAK,CAAlB;;MACA,QAAQ9C,IAAR;QACI,KAAK,GAAL;QACA,KAAK,GAAL;UACI8C,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA;UAAzB,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA;UAAzB,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA;UAAnB,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACI0C,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBE,CAAC,EAAEA;UAAnB,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA,CAAzB;YAA4BC,EAAE,EAAEA,EAAhC;YAAoCC,EAAE,EAAEA,EAAxC;YAA4CC,EAAE,EAAEA,EAAhD;YAAoDC,EAAE,EAAEA;UAAxD,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIqC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA,CAAzB;YAA4BG,EAAE,EAAEA,EAAhC;YAAoCC,EAAE,EAAEA;UAAxC,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIqC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA,CAAzB;YAA4BC,EAAE,EAAEA,EAAhC;YAAoCC,EAAE,EAAEA;UAAxC,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIuC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA;UAAzB,CAAT;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIyC,MAAM,GAAG;YAAE3C,OAAO,EAAE,GAAX;YAAgBC,CAAC,EAAEA,CAAnB;YAAsBC,CAAC,EAAEA;UAAzB,CAAT;UACAyC,MAAM,CAACpC,EAAP,GAAYgC,GAAG,CAAChC,EAAhB;UACAoC,MAAM,CAACnC,EAAP,GAAY+B,GAAG,CAAC/B,EAAhB;UACAmC,MAAM,CAAClC,KAAP,GAAe8B,GAAG,CAAC9B,KAAnB;UACAkC,MAAM,CAACjC,QAAP,GAAkB6B,GAAG,CAAC7B,QAAtB;UACAiC,MAAM,CAAChC,KAAP,GAAe4B,GAAG,CAAC5B,KAAnB;UACA;;QACJ,KAAK,GAAL;QACA,KAAK,GAAL;UACIgC,MAAM,GAAG;YAAE3C,OAAO,EAAE;UAAX,CAAT;UACAC,CAAC,GAAGgC,EAAJ;UACA/B,CAAC,GAAGgC,EAAJ;UACAS,MAAM,GAAGnD,eAAe,CAACG,CAAD,CAAxB;UACA;MAhDR;;MAkDA,IAAIgD,MAAJ,EAAY;QACRnD,eAAe,CAACG,CAAD,CAAf,GAAqBgD,MAArB;MACH;IACJ;;IACD,IAAI9C,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;MAC9BoC,EAAE,GAAGhC,CAAL;MACAiC,EAAE,GAAGhC,CAAL;IACH;EACJ;;EACD,OAAOV,eAAP;AACH;AACD;;AACA,OAAO,SAASmE,aAAT,CAAuBnE,eAAvB,EAAwC;EAC3C,IAAI4E,YAAY,GAAG,EAAnB;EACA,IAAIzE,CAAJ;;EACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,eAAe,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;IACzC,IAAIA,CAAC,KAAK,CAAV,EAAa;MACTyE,YAAY,IAAIC,SAAS,CAAC7E,eAAe,CAACG,CAAD,CAAhB,CAAzB;IACH,CAFD,MAGK;MACDyE,YAAY,IAAI,MAAMC,SAAS,CAAC7E,eAAe,CAACG,CAAD,CAAhB,CAA/B;IACH;EACJ;;EACD,OAAOyE,YAAP;AACH;AACD;;AACA,OAAO,SAASC,SAAT,CAAmB/B,GAAnB,EAAwB;EAC3B,IAAIgC,MAAM,GAAG,EAAb;;EACA,QAAQhC,GAAG,CAACtC,OAAZ;IACI,KAAK,GAAL;IACA,KAAK,GAAL;MACIsE,MAAM,GAAGhC,GAAG,CAACtC,OAAb;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;IACA,KAAK,GAAL;MACIsE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACrC,CAAxB,GAA4B,GAA5B,GAAkCqC,GAAG,CAACpC,CAA/C;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIoE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACnC,EAAxB,GAA6B,GAA7B,GAAmCmC,GAAG,CAAClC,EAAvC,GAA4C,GAA5C,GAAkDkC,GAAG,CAACjC,EAAtD,GAA2D,GAA3D,GAAiEiC,GAAG,CAAChC,EAArE,GAA0E,GAA1E,GAAgFgC,GAAG,CAACrC,CAApF,GAAwF,GAAxF,GAA8FqC,GAAG,CAACpC,CAA3G;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIoE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACnC,EAAxB,GAA6B,GAA7B,GAAmCmC,GAAG,CAAClC,EAAvC,GAA4C,GAA5C,GAAkDkC,GAAG,CAACrC,CAAtD,GAA0D,GAA1D,GAAgEqC,GAAG,CAACpC,CAA7E;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACI,IAAIqE,GAAG,GAAGjC,GAAG,CAACtC,OAAd;MACA,IAAIwE,GAAG,GAAGlC,GAAG,CAAC7B,KAAd;MACA,IAAIgE,CAAC,GAAInC,GAAG,CAAC5B,QAAJ,GAAe,GAAf,GAAqB,GAA9B;MACA,IAAIsC,CAAC,GAAIV,GAAG,CAAC3B,KAAJ,GAAY,GAAZ,GAAkB,GAA3B;MACA2D,MAAM,GAAGC,GAAG,GAAG,GAAN,GAAYjC,GAAG,CAAC/B,EAAhB,GAAqB,GAArB,GAA2B+B,GAAG,CAAC9B,EAA/B,GAAoC,GAApC,GAA0CgE,GAA1C,GAAgD,GAAhD,GAAsDC,CAAtD,GAA0D,GAA1D,GAAgEzB,CAAhE,GAAoE,GAApE,GAA0EV,GAAG,CAACrC,CAA9E,GAAkF,GAAlF,GAAwFqC,GAAG,CAACpC,CAArG;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIoE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACrC,CAAjC;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIqE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACpC,CAAjC;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIoE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACjC,EAAxB,GAA6B,GAA7B,GAAmCiC,GAAG,CAAChC,EAAvC,GAA4C,GAA5C,GAAkDgC,GAAG,CAACrC,CAAtD,GAA0D,GAA1D,GAAgEqC,GAAG,CAACpC,CAA7E;MACA;;IACJ,KAAK,GAAL;IACA,KAAK,GAAL;MACIoE,MAAM,GAAGhC,GAAG,CAACtC,OAAJ,GAAc,GAAd,GAAoBsC,GAAG,CAACrC,CAAxB,GAA4B,GAA5B,GAAkCqC,GAAG,CAACpC,CAA/C;EAzCR;;EA2CA,OAAOoE,MAAP;AACH"},"metadata":{},"sourceType":"module"}