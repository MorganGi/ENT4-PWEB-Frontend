{"ast":null,"code":"/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\n\nvar SelectionCommands =\n/** @class */\nfunction () {\n  function SelectionCommands() {}\n  /**\n   * applyFormat method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {string} format - specifies the string value\n   * @param {Node} endNode - specifies the end node\n   * @param {string} enterAction - specifies the enter key action\n   * @param {string} value - specifies the string value\n   * @param {string} selector - specifies the string\n   * @returns {void}\n   * @hidden\n    */\n\n\n  SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector) {\n    this.enterAction = enterAction;\n    var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n\n    if (validFormats.indexOf(format) > -1) {\n      if (format === 'backgroundcolor' && value === '') {\n        value = 'transparent';\n      }\n\n      var domSelection = new NodeSelection();\n      var domNode = new DOMNode(endNode, docElement);\n      var nodeCutter = new NodeCutter();\n      var isFormatted = new IsFormatted();\n      var range = domSelection.getRange(docElement);\n      var save = domSelection.save(range, docElement);\n      var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n      var isCollapsed = false;\n      var isFormat = false;\n      var isCursor = false;\n      var preventRestore = false;\n      var isFontStyle = ['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1;\n\n      if (range.collapsed) {\n        var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);\n        var currentSelector = !isNOU(currentFormatNode) ? currentFormatNode.getAttribute('style') === null ? currentFormatNode.nodeName : currentFormatNode.nodeName + \"[style='\" + currentFormatNode.getAttribute('style') + \"']\" : null;\n\n        if (nodes.length > 0) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n        } else if (range.startContainer.nodeType === 3 && (range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br' || !isNOU(currentFormatNode) && currentFormatNode === range.startContainer.parentElement.closest(currentSelector) && range.startContainer.parentElement.closest(currentSelector).textContent.replace(new RegExp(String.fromCharCode(8203), 'g'), '').trim().length != 0)) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n          nodes.push(range.startContainer);\n        } else {\n          var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n          domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n          var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n\n          if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n            domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n            preventRestore = true;\n          } else {\n            domSelection.endOffset = domSelection.startOffset = 1;\n          }\n\n          if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n            preventRestore = true;\n          }\n        }\n      }\n\n      isCursor = range.collapsed;\n      var isSubSup = false;\n\n      for (var index = 0; index < nodes.length; index++) {\n        var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n\n        if (formatNode === null) {\n          if (format === 'subscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          } else if (format === 'superscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          }\n        }\n\n        if (index === 0 && formatNode === null) {\n          isFormat = true;\n        }\n\n        if (formatNode !== null && (!isFormat || isFontStyle)) {\n          nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n        } else {\n          nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n        }\n\n        domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n      }\n\n      if (isIDevice()) {\n        setEditFrameFocus(endNode, selector);\n      }\n\n      if (!preventRestore) {\n        save.restore();\n      }\n\n      if (isSubSup) {\n        this.applyFormat(docElement, format, endNode, enterAction);\n      }\n    }\n  };\n\n  SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n    var cursorNodes = domSelection.getNodeCollection(range);\n    var domNode = new DOMNode(endNode, docElement);\n    var cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n    var cursorNode = null;\n\n    if (cursorFormat) {\n      cursorNode = cursorNodes[0];\n\n      if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n        var isCursorEqual = false;\n        var regEx = new RegExp(String.fromCharCode(8203), 'g');\n        var emptySpaceNode = void 0;\n\n        if (cursorFormat.firstChild === cursorNode) {\n          cursorNode.textContent = cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) && cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 : cursorFormat.childElementCount === 0) && (cursorFormat.parentElement.textContent.length > 1 || cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ? cursorNode.textContent : cursorNode.textContent.replace(regEx, '');\n          emptySpaceNode = cursorNode;\n          isCursorEqual = true;\n        } else {\n          cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n          emptySpaceNode = cursorFormat.firstChild;\n        }\n\n        var pointer = void 0;\n\n        if (emptySpaceNode.textContent.length === 0) {\n          if (!isNOU(emptySpaceNode.previousSibling)) {\n            cursorNode = emptySpaceNode.previousSibling;\n            pointer = emptySpaceNode.textContent.length - 1;\n            domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n          } else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n            var brElem = document.createElement('BR');\n            emptySpaceNode.parentElement.appendChild(brElem);\n            detach(emptySpaceNode);\n            cursorNode = brElem;\n            domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n          }\n        }\n      }\n\n      if (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1) {\n        if (format === 'fontcolor') {\n          cursorFormat.style.color = value;\n        } else if (format === 'fontname') {\n          cursorFormat.style.fontFamily = value;\n        } else if (format === 'fontsize') {\n          cursorFormat.style.fontSize = value;\n        } else {\n          cursorFormat.style.backgroundColor = value;\n        }\n\n        cursorNode = cursorFormat;\n      } else {\n        InsertMethods.unwrap(cursorFormat);\n      }\n    } else {\n      if (cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br') {\n        cursorNodes[0].innerHTML = '';\n      }\n\n      if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || cursorNodes[0].nextSibling.nodeName === 'BR')) {\n        detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n      }\n\n      cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n    }\n\n    return cursorNode;\n  };\n\n  SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n    var currentNode;\n\n    for (var index = 0; index < cursorNodes.length; index++) {\n      currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];\n    }\n\n    return isFormatted.getFormattedNode(currentNode, format, endNode);\n  };\n\n  SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n    var splitNode = null;\n    var startText = range.startContainer.nodeName === '#text' ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;\n\n    if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length)) {\n      var nodeIndex = [];\n      var cloneNode = nodes[index];\n\n      do {\n        nodeIndex.push(domSelection.getIndex(cloneNode));\n        cloneNode = cloneNode.parentNode;\n      } while (cloneNode && cloneNode !== formatNode);\n\n      if (nodes[index].nodeName !== 'BR') {\n        cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);\n      }\n\n      if (!isCursor) {\n        while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {\n          cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n          nodeIndex.pop();\n        }\n\n        if (nodes[index].nodeName !== 'BR') {\n          if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n            nodes[index] = cloneNode;\n          } else {\n            var divNode = document.createElement('div');\n            divNode.innerHTML = '&#8203;';\n\n            if (cloneNode.nodeType !== 3) {\n              cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n              nodes[index] = cloneNode.firstChild;\n            } else {\n              cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n              nodes[index] = cloneNode.previousSibling;\n              cloneNode.parentNode.removeChild(cloneNode);\n            }\n          }\n        }\n      } else {\n        var lastNode = splitNode;\n\n        for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n          lastNode = lastNode.firstChild;\n        }\n\n        lastNode.innerHTML = '&#8203;';\n        nodes[index] = lastNode.firstChild;\n      }\n    }\n\n    var fontStyle;\n\n    if (format === 'backgroundcolor') {\n      fontStyle = formatNode.style.fontSize;\n    }\n\n    var bgStyle;\n\n    if (format === 'fontsize') {\n      var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n\n      if (!isNOU(bg)) {\n        bgStyle = bg.style.backgroundColor;\n      }\n    }\n\n    var formatNodeStyles = formatNode.getAttribute('style');\n    var formatNodeTagName = formatNode.tagName;\n    var child = InsertMethods.unwrap(formatNode);\n\n    if (child[0] && !isFontStyle) {\n      var nodeTraverse = child[index] ? child[index] : child[0];\n      var textNode = nodeTraverse;\n\n      for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; // eslint-disable-next-line\n      nodeTraverse = nodeTraverse) {\n        var nodeTraverseCondition = void 0;\n\n        if (formatNode.nodeName === 'SPAN') {\n          nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles;\n        } else {\n          nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase();\n        }\n\n        if (nodeTraverse.parentElement && nodeTraverseCondition && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n          if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {\n            if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n              range.setStart(textNode, 0);\n              range.setEnd(textNode, textNode.textContent.length);\n              nodeCutter.SplitNode(range, textNode.parentElement, false);\n            }\n          }\n\n          if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n            if (formatNode.style.textDecoration === 'underline' && nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n              nodeTraverse = nodeTraverse.parentElement;\n              continue;\n            }\n          }\n\n          InsertMethods.unwrap(nodeTraverse.parentElement);\n          nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;\n        } else {\n          nodeTraverse = nodeTraverse.parentElement;\n        }\n      }\n    }\n\n    if (child.length > 0 && isFontStyle) {\n      for (var num = 0; num < child.length; num++) {\n        if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {\n          child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n\n          if (child[num].textContent === startText) {\n            if (num === 0) {\n              range.setStartBefore(child[num]);\n            } else if (num === child.length - 1) {\n              range.setEndAfter(child[num]);\n            }\n          }\n        }\n      }\n\n      var currentNodeElem = nodes[index].parentElement;\n\n      if (!isNOU(fontStyle) && fontStyle !== '') {\n        currentNodeElem.style.fontSize = fontStyle;\n      }\n\n      if (!isNOU(bgStyle) && bgStyle !== '') {\n        currentNodeElem.style.backgroundColor = bgStyle;\n      }\n\n      if (format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '' && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n        var curParentElem = currentNodeElem.parentElement;\n        curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n        detach(curParentElem);\n      }\n\n      if (format === 'fontsize' || format === 'fontcolor') {\n        var liElement = nodes[index].parentElement;\n        var parentElement = nodes[index].parentElement;\n\n        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n          parentElement = parentElement.parentElement;\n          liElement = parentElement;\n        }\n\n        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n          if (format === 'fontsize') {\n            liElement.style.fontSize = value;\n          } else {\n            liElement.style.color = value;\n            liElement.style.textDecoration = 'inherit';\n          }\n        }\n      }\n    }\n\n    return nodes[index];\n  };\n\n  SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n    if (!isCursor) {\n      if (formatNode === null && isFormat || isFontStyle) {\n        if (nodes[index].nodeName !== 'BR') {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n          nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n        }\n\n        if (format === 'uppercase' || format === 'lowercase') {\n          nodes[index].textContent = format === 'uppercase' ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();\n        } else if (!(isFontStyle === true && value === '')) {\n          var element = this.GetFormatNode(format, value);\n\n          if (format === 'fontsize' || format === 'fontcolor') {\n            var liElement = nodes[index].parentElement;\n            var parentElement = nodes[index].parentElement;\n\n            while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n              parentElement = parentElement.parentElement;\n              liElement = parentElement;\n            }\n\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'fontsize') {\n                liElement.style.fontSize = value;\n              } else {\n                liElement.style.color = value;\n                liElement.style.textDecoration = 'inherit';\n              }\n            }\n\n            nodes[index] = this.applyStyles(nodes, index, element);\n\n            if (format === 'fontsize') {\n              var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n\n              if (!isNOU(bg)) {\n                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n              }\n            }\n          } else {\n            nodes[index] = this.applyStyles(nodes, index, element);\n          }\n        }\n      } else {\n        nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n      }\n    } else {\n      if (format !== 'uppercase' && format !== 'lowercase') {\n        var element = this.getInsertNode(docElement, range, format, value);\n        nodes[index] = element.firstChild;\n        nodeCutter.position = 1;\n      } else {\n        nodeCutter.position = range.startOffset;\n      }\n    }\n\n    return nodes[index];\n  };\n\n  SelectionCommands.applyStyles = function (nodes, index, element) {\n    if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n      nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === 'BR' ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);\n      nodes[index] = this.getChildNode(nodes[index], element);\n    }\n\n    return nodes[index];\n  };\n\n  SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n    var element = this.GetFormatNode(format, value);\n    element.innerHTML = '&#8203;';\n\n    if (Browser.isIE) {\n      var frag = docElement.createDocumentFragment();\n      frag.appendChild(element);\n      range.insertNode(frag);\n    } else {\n      range.insertNode(element);\n    }\n\n    return element;\n  };\n\n  SelectionCommands.getChildNode = function (node, element) {\n    if (node === undefined || node === null) {\n      element.innerHTML = '&#8203;';\n      node = element.firstChild;\n    }\n\n    return node;\n  };\n\n  SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n    if (nodes.length === 1 && !isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = 0;\n      domSelection.endOffset = nodes[index].textContent.length;\n    } else if (nodes.length === 1 && isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = nodeCutter.position;\n      domSelection.endOffset = nodeCutter.position;\n    } else if (index === 0) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.startOffset = 0;\n    } else if (index === nodes.length - 1) {\n      domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n      domSelection.endOffset = nodes[index].textContent.length;\n    }\n\n    return domSelection;\n  };\n\n  SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n    var node;\n\n    switch (format) {\n      case 'bold':\n        return document.createElement('strong');\n\n      case 'italic':\n        return document.createElement('em');\n\n      case 'underline':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'underline';\n        return node;\n\n      case 'strikethrough':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'line-through';\n        return node;\n\n      case 'superscript':\n        return document.createElement('sup');\n\n      case 'subscript':\n        return document.createElement('sub');\n\n      case 'fontcolor':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.color = value;\n        node.style.textDecoration = 'inherit';\n        return node;\n\n      case 'fontname':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontFamily = value;\n        return node;\n\n      case 'fontsize':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontSize = value;\n        return node;\n\n      default:\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.backgroundColor = value;\n        return node;\n    }\n  };\n\n  SelectionCommands.updateStyles = function (ele, tag, styles) {\n    if (styles !== null && tag === 'SPAN') {\n      ele.setAttribute('style', styles);\n    }\n  };\n\n  SelectionCommands.enterAction = 'P';\n  return SelectionCommands;\n}();\n\nexport { SelectionCommands };","map":{"version":3,"names":["NodeSelection","NodeCutter","InsertMethods","IsFormatted","isIDevice","setEditFrameFocus","isNullOrUndefined","isNOU","Browser","closest","detach","DOMNode","SelectionCommands","applyFormat","docElement","format","endNode","enterAction","value","selector","validFormats","indexOf","domSelection","domNode","nodeCutter","isFormatted","range","getRange","save","nodes","collapsed","getSelectionNodeCollection","getSelectionNodeCollectionBr","isCollapsed","isFormat","isCursor","preventRestore","isFontStyle","currentFormatNode","getFormattedNode","startContainer","currentSelector","getAttribute","nodeName","length","GetCursorRange","nodeType","parentElement","childElementCount","startOffset","firstElementChild","tagName","toLowerCase","textContent","replace","RegExp","String","fromCharCode","trim","push","cursorNode","insertCursorNode","endContainer","getNodeArray","childNodes","parentNode","setSelectionText","endOffset","isSubSup","index","formatNode","removeFormat","insertFormat","applySelection","restore","cursorNodes","getNodeCollection","cursorFormat","getCursorFormat","firstChild","charCodeAt","isCursorEqual","regEx","emptySpaceNode","isBlockNode","pointer","previousSibling","setCursorPoint","brElem","document","createElement","appendChild","style","color","fontFamily","fontSize","backgroundColor","unwrap","innerHTML","nextSibling","getInsertNode","currentNode","lastElementChild","splitNode","startText","substring","nodeIndex","cloneNode","getIndex","SplitNode","GetSpliceNode","pop","nodeValue","divNode","insertBefore","removeChild","lastNode","fontStyle","bgStyle","bg","formatNodeStyles","formatNodeTagName","child","nodeTraverse","textNode","nodeTraverseCondition","toLocaleLowerCase","setStart","setEnd","textDecoration","num","Wrap","GetFormatNode","setStartBefore","setEndAfter","currentNodeElem","outerHTML","curParentElem","liElement","TrimLineBreak","toLocaleUpperCase","element","applyStyles","position","WrapBefore","getChildNode","isIE","frag","createDocumentFragment","insertNode","node","undefined","styles","updateStyles","ele","tag","setAttribute"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-commands.js"],"sourcesContent":["/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */ (function () {\n    function SelectionCommands() {\n    }\n    /**\n     * applyFormat method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {string} format - specifies the string value\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} value - specifies the string value\n     * @param {string} selector - specifies the string\n     * @returns {void}\n     * @hidden\n\n     */\n    SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector) {\n        this.enterAction = enterAction;\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\n            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n        if (validFormats.indexOf(format) > -1) {\n            if (format === 'backgroundcolor' && value === '') {\n                value = 'transparent';\n            }\n            var domSelection = new NodeSelection();\n            var domNode = new DOMNode(endNode, docElement);\n            var nodeCutter = new NodeCutter();\n            var isFormatted = new IsFormatted();\n            var range = domSelection.getRange(docElement);\n            var save = domSelection.save(range, docElement);\n            var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n                domSelection.getSelectionNodeCollectionBr(range);\n            var isCollapsed = false;\n            var isFormat = false;\n            var isCursor = false;\n            var preventRestore = false;\n            var isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);\n            if (range.collapsed) {\n                var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);\n                var currentSelector = !isNOU(currentFormatNode) ?\n                    (currentFormatNode.getAttribute('style') === null ? currentFormatNode.nodeName :\n                        currentFormatNode.nodeName + \"[style='\" + currentFormatNode.getAttribute('style') + \"']\") : null;\n                if (nodes.length > 0) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n                }\n                else if (range.startContainer.nodeType === 3 && ((range.startContainer.parentElement.childElementCount > 0 &&\n                    range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') ||\n                    !isNOU(currentFormatNode) && currentFormatNode === (range.startContainer.parentElement.closest(currentSelector)) &&\n                        ((range.startContainer.parentElement.closest(currentSelector)).textContent.replace(new RegExp(String.fromCharCode(8203), 'g'), '').trim().length != 0))) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n                    nodes.push(range.startContainer);\n                }\n                else {\n                    var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n                    var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n                    if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n                        domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n                        preventRestore = true;\n                    }\n                    else {\n                        domSelection.endOffset = domSelection.startOffset = 1;\n                    }\n                    if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n                        preventRestore = true;\n                    }\n                }\n            }\n            isCursor = range.collapsed;\n            var isSubSup = false;\n            for (var index = 0; index < nodes.length; index++) {\n                var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n                if (formatNode === null) {\n                    if (format === 'subscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                    else if (format === 'superscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                }\n                if (index === 0 && formatNode === null) {\n                    isFormat = true;\n                }\n                if (formatNode !== null && (!isFormat || isFontStyle)) {\n                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n                }\n                else {\n                    nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n                }\n                domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n            }\n            if (isIDevice()) {\n                setEditFrameFocus(endNode, selector);\n            }\n            if (!preventRestore) {\n                save.restore();\n            }\n            if (isSubSup) {\n                this.applyFormat(docElement, format, endNode, enterAction);\n            }\n        }\n    };\n    SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n        var cursorNodes = domSelection.getNodeCollection(range);\n        var domNode = new DOMNode(endNode, docElement);\n        var cursorFormat = (cursorNodes.length > 0) ?\n            (cursorNodes.length > 1 && range.startContainer === range.endContainer) ?\n                this.getCursorFormat(isFormatted, cursorNodes, format, endNode) :\n                isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n        var cursorNode = null;\n        if (cursorFormat) {\n            cursorNode = cursorNodes[0];\n            if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n                var isCursorEqual = false;\n                var regEx = new RegExp(String.fromCharCode(8203), 'g');\n                var emptySpaceNode = void 0;\n                if (cursorFormat.firstChild === cursorNode) {\n                    cursorNode.textContent = (cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) &&\n                        cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 :\n                        cursorFormat.childElementCount === 0) &&\n                        (cursorFormat.parentElement.textContent.length > 1 ||\n                            cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ?\n                        cursorNode.textContent : cursorNode.textContent.replace(regEx, ''));\n                    emptySpaceNode = cursorNode;\n                    isCursorEqual = true;\n                }\n                else {\n                    cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n                    emptySpaceNode = cursorFormat.firstChild;\n                }\n                var pointer = void 0;\n                if (emptySpaceNode.textContent.length === 0) {\n                    if (!isNOU(emptySpaceNode.previousSibling)) {\n                        cursorNode = emptySpaceNode.previousSibling;\n                        pointer = emptySpaceNode.textContent.length - 1;\n                        domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n                    }\n                    else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n                        var brElem = document.createElement('BR');\n                        emptySpaceNode.parentElement.appendChild(brElem);\n                        detach(emptySpaceNode);\n                        cursorNode = brElem;\n                        domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n                    }\n                }\n            }\n            if ((['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1)) {\n                if (format === 'fontcolor') {\n                    cursorFormat.style.color = value;\n                }\n                else if (format === 'fontname') {\n                    cursorFormat.style.fontFamily = value;\n                }\n                else if (format === 'fontsize') {\n                    cursorFormat.style.fontSize = value;\n                }\n                else {\n                    cursorFormat.style.backgroundColor = value;\n                }\n                cursorNode = cursorFormat;\n            }\n            else {\n                InsertMethods.unwrap(cursorFormat);\n            }\n        }\n        else {\n            if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild &&\n                cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br')) {\n                cursorNodes[0].innerHTML = '';\n            }\n            if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' ||\n                cursorNodes[0].nextSibling.nodeName === 'BR')) {\n                detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n            }\n            cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n        }\n        return cursorNode;\n    };\n    SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n        var currentNode;\n        for (var index = 0; index < cursorNodes.length; index++) {\n            currentNode = cursorNodes[index].lastElementChild ?\n                cursorNodes[index].lastElementChild : cursorNodes[index];\n        }\n        return isFormatted.getFormattedNode(currentNode, format, endNode);\n    };\n    SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n        var splitNode = null;\n        var startText = range.startContainer.nodeName === '#text' ?\n            range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) :\n            range.startContainer.textContent;\n        if (!(range.startContainer === range.endContainer && range.startOffset === 0\n            && range.endOffset === range.startContainer.length)) {\n            var nodeIndex = [];\n            var cloneNode = nodes[index];\n            do {\n                nodeIndex.push(domSelection.getIndex(cloneNode));\n                cloneNode = cloneNode.parentNode;\n            } while (cloneNode && (cloneNode !== formatNode));\n            if (nodes[index].nodeName !== 'BR') {\n                cloneNode = splitNode = (isCursor && (formatNode.textContent.length - 1) === range.startOffset) ?\n                    nodeCutter.SplitNode(range, formatNode, true)\n                    : nodeCutter.GetSpliceNode(range, formatNode);\n            }\n            if (!isCursor) {\n                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)\n                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {\n                    cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n                    nodeIndex.pop();\n                }\n                if (nodes[index].nodeName !== 'BR') {\n                    if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n                        nodes[index] = cloneNode;\n                    }\n                    else {\n                        var divNode = document.createElement('div');\n                        divNode.innerHTML = '&#8203;';\n                        if (cloneNode.nodeType !== 3) {\n                            cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n                            nodes[index] = cloneNode.firstChild;\n                        }\n                        else {\n                            cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n                            nodes[index] = cloneNode.previousSibling;\n                            cloneNode.parentNode.removeChild(cloneNode);\n                        }\n                    }\n                }\n            }\n            else {\n                var lastNode = splitNode;\n                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n                    lastNode = lastNode.firstChild;\n                }\n                lastNode.innerHTML = '&#8203;';\n                nodes[index] = lastNode.firstChild;\n            }\n        }\n        var fontStyle;\n        if (format === 'backgroundcolor') {\n            fontStyle = formatNode.style.fontSize;\n        }\n        var bgStyle;\n        if (format === 'fontsize') {\n            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n            if (!isNOU(bg)) {\n                bgStyle = bg.style.backgroundColor;\n            }\n        }\n        var formatNodeStyles = formatNode.getAttribute('style');\n        var formatNodeTagName = formatNode.tagName;\n        var child = InsertMethods.unwrap(formatNode);\n        if (child[0] && !isFontStyle) {\n            var nodeTraverse = child[index] ? child[index] : child[0];\n            var textNode = nodeTraverse;\n            for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; \n            // eslint-disable-next-line\n            nodeTraverse = nodeTraverse) {\n                var nodeTraverseCondition = void 0;\n                if (formatNode.nodeName === 'SPAN') {\n                    nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute('style') === formatNodeStyles;\n                }\n                else {\n                    nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase();\n                }\n                if (nodeTraverse.parentElement && nodeTraverseCondition &&\n                    (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n                    if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase()) {\n                        if ((range.startOffset === range.endOffset) && textNode.nodeType !== 1 &&\n                            !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n                            range.setStart(textNode, 0);\n                            range.setEnd(textNode, textNode.textContent.length);\n                            nodeCutter.SplitNode(range, textNode.parentElement, false);\n                        }\n                    }\n                    if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n                        if (formatNode.style.textDecoration === 'underline' &&\n                            nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n                            nodeTraverse = nodeTraverse.parentElement;\n                            continue;\n                        }\n                    }\n                    InsertMethods.unwrap(nodeTraverse.parentElement);\n                    nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode :\n                        nodeTraverse.parentElement;\n                }\n                else {\n                    nodeTraverse = nodeTraverse.parentElement;\n                }\n            }\n        }\n        if (child.length > 0 && isFontStyle) {\n            for (var num = 0; num < child.length; num++) {\n                if (child[num].nodeType !== 3 || (child[num].textContent && child[num].textContent.trim().length > 0)) {\n                    child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n                    if (child[num].textContent === startText) {\n                        if (num === 0) {\n                            range.setStartBefore(child[num]);\n                        }\n                        else if (num === child.length - 1) {\n                            range.setEndAfter(child[num]);\n                        }\n                    }\n                }\n            }\n            var currentNodeElem = nodes[index].parentElement;\n            if (!isNOU(fontStyle) && fontStyle !== '') {\n                currentNodeElem.style.fontSize = fontStyle;\n            }\n            if (!isNOU(bgStyle) && bgStyle !== '') {\n                currentNodeElem.style.backgroundColor = bgStyle;\n            }\n            if ((format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '') &&\n                currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n                var curParentElem = currentNodeElem.parentElement;\n                curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n                detach(curParentElem);\n            }\n            if (format === 'fontsize' || format === 'fontcolor') {\n                var liElement = nodes[index].parentElement;\n                var parentElement = nodes[index].parentElement;\n                while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                    parentElement = parentElement.parentElement;\n                    liElement = parentElement;\n                }\n                if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                    liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                    if (format === 'fontsize') {\n                        liElement.style.fontSize = value;\n                    }\n                    else {\n                        liElement.style.color = value;\n                        liElement.style.textDecoration = 'inherit';\n                    }\n                }\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n        if (!isCursor) {\n            if ((formatNode === null && isFormat) || isFontStyle) {\n                if (nodes[index].nodeName !== 'BR') {\n                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n                    nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n                }\n                if (format === 'uppercase' || format === 'lowercase') {\n                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()\n                        : nodes[index].textContent.toLocaleLowerCase();\n                }\n                else if (!(isFontStyle === true && value === '')) {\n                    var element = this.GetFormatNode(format, value);\n                    if (format === 'fontsize' || format === 'fontcolor') {\n                        var liElement = nodes[index].parentElement;\n                        var parentElement = nodes[index].parentElement;\n                        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                            parentElement = parentElement.parentElement;\n                            liElement = parentElement;\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'fontsize') {\n                                liElement.style.fontSize = value;\n                            }\n                            else {\n                                liElement.style.color = value;\n                                liElement.style.textDecoration = 'inherit';\n                            }\n                        }\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                        if (format === 'fontsize') {\n                            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n                            if (!isNOU(bg)) {\n                                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n                            }\n                        }\n                    }\n                    else {\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                    }\n                }\n            }\n            else {\n                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n            }\n        }\n        else {\n            if (format !== 'uppercase' && format !== 'lowercase') {\n                var element = this.getInsertNode(docElement, range, format, value);\n                nodes[index] = element.firstChild;\n                nodeCutter.position = 1;\n            }\n            else {\n                nodeCutter.position = range.startOffset;\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.applyStyles = function (nodes, index, element) {\n        if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n            nodes[index] = (index === (nodes.length - 1)) || nodes[index].nodeName === 'BR' ?\n                InsertMethods.Wrap(nodes[index], element)\n                : InsertMethods.WrapBefore(nodes[index], element, true);\n            nodes[index] = this.getChildNode(nodes[index], element);\n        }\n        return nodes[index];\n    };\n    SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n        var element = this.GetFormatNode(format, value);\n        element.innerHTML = '&#8203;';\n        if (Browser.isIE) {\n            var frag = docElement.createDocumentFragment();\n            frag.appendChild(element);\n            range.insertNode(frag);\n        }\n        else {\n            range.insertNode(element);\n        }\n        return element;\n    };\n    SelectionCommands.getChildNode = function (node, element) {\n        if (node === undefined || node === null) {\n            element.innerHTML = '&#8203;';\n            node = element.firstChild;\n        }\n        return node;\n    };\n    SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n        if (nodes.length === 1 && !isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = 0;\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        else if (nodes.length === 1 && isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = nodeCutter.position;\n            domSelection.endOffset = nodeCutter.position;\n        }\n        else if (index === 0) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.startOffset = 0;\n        }\n        else if (index === nodes.length - 1) {\n            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        return domSelection;\n    };\n    SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n        var node;\n        switch (format) {\n            case 'bold':\n                return document.createElement('strong');\n            case 'italic':\n                return document.createElement('em');\n            case 'underline':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'underline';\n                return node;\n            case 'strikethrough':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'line-through';\n                return node;\n            case 'superscript':\n                return document.createElement('sup');\n            case 'subscript':\n                return document.createElement('sub');\n            case 'fontcolor':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.color = value;\n                node.style.textDecoration = 'inherit';\n                return node;\n            case 'fontname':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontFamily = value;\n                return node;\n            case 'fontsize':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontSize = value;\n                return node;\n            default:\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.backgroundColor = value;\n                return node;\n        }\n    };\n    SelectionCommands.updateStyles = function (ele, tag, styles) {\n        if (styles !== null && tag === 'SPAN') {\n            ele.setAttribute('style', styles);\n        }\n    };\n    SelectionCommands.enterAction = 'P';\n    return SelectionCommands;\n}());\nexport { SelectionCommands };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}