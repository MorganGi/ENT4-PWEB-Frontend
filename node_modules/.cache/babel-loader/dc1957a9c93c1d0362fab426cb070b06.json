{"ast":null,"code":"var _jsxFileName = \"/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/src/components2/search/Search.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  const pdf_extract = require(\"pdf-extract\");\n\n  const path = require(\"./readPdf.pdf\");\n\n  const absolute_path_to_pdf = path.resolve(process.argv[2]);\n  if (absolute_path_to_pdf.includes(\" \")) throw new Error(\"will fail for paths w spaces like \" + absolute_path_to_pdf);\n  const options = {\n    type: \"ocr\",\n    // perform ocr to get the text within the scanned image\n    ocr_flags: [\"--psm 1\"] // automatically detect page orientation\n\n  };\n  const processor = pdf_extract(absolute_path_to_pdf, options, () => console.log(\"Starting…\"));\n  processor.on(\"complete\", data => callback(null, data));\n  processor.on(\"error\", callback);\n\n  function callback(error, data) {\n    error ? console.error(error) : console.log(data.text_pages[0]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Search\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n}\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","Search","pdf_extract","require","path","absolute_path_to_pdf","resolve","process","argv","includes","Error","options","type","ocr_flags","processor","console","log","on","data","callback","error","text_pages"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/src/components2/search/Search.js"],"sourcesContent":["import React from \"react\";\n\nfunction Search() {\n  const pdf_extract = require(\"pdf-extract\");\n  const path = require(\"./readPdf.pdf\");\n  const absolute_path_to_pdf = path.resolve(process.argv[2]);\n  if (absolute_path_to_pdf.includes(\" \"))\n    throw new Error(\n      \"will fail for paths w spaces like \" + absolute_path_to_pdf\n    );\n\n  const options = {\n    type: \"ocr\", // perform ocr to get the text within the scanned image\n    ocr_flags: [\"--psm 1\"], // automatically detect page orientation\n  };\n  const processor = pdf_extract(absolute_path_to_pdf, options, () =>\n    console.log(\"Starting…\")\n  );\n  processor.on(\"complete\", (data) => callback(null, data));\n  processor.on(\"error\", callback);\n  function callback(error, data) {\n    error ? console.error(error) : console.log(data.text_pages[0]);\n  }\n\n  return <div>Search</div>;\n}\n\nexport default Search;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,MAAT,GAAkB;EAChB,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;EACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,eAAD,CAApB;;EACA,MAAME,oBAAoB,GAAGD,IAAI,CAACE,OAAL,CAAaC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAb,CAA7B;EACA,IAAIH,oBAAoB,CAACI,QAArB,CAA8B,GAA9B,CAAJ,EACE,MAAM,IAAIC,KAAJ,CACJ,uCAAuCL,oBADnC,CAAN;EAIF,MAAMM,OAAO,GAAG;IACdC,IAAI,EAAE,KADQ;IACD;IACbC,SAAS,EAAE,CAAC,SAAD,CAFG,CAEU;;EAFV,CAAhB;EAIA,MAAMC,SAAS,GAAGZ,WAAW,CAACG,oBAAD,EAAuBM,OAAvB,EAAgC,MAC3DI,OAAO,CAACC,GAAR,CAAY,WAAZ,CAD2B,CAA7B;EAGAF,SAAS,CAACG,EAAV,CAAa,UAAb,EAA0BC,IAAD,IAAUC,QAAQ,CAAC,IAAD,EAAOD,IAAP,CAA3C;EACAJ,SAAS,CAACG,EAAV,CAAa,OAAb,EAAsBE,QAAtB;;EACA,SAASA,QAAT,CAAkBC,KAAlB,EAAyBF,IAAzB,EAA+B;IAC7BE,KAAK,GAAGL,OAAO,CAACK,KAAR,CAAcA,KAAd,CAAH,GAA0BL,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACG,UAAL,CAAgB,CAAhB,CAAZ,CAA/B;EACD;;EAED,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;KAvBQpB,M;AAyBT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}