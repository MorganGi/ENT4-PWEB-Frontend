{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Size } from '../../primitives/size';\nimport { DrawingElement } from './drawing-element';\nimport { measureText } from './../../utility/dom-util';\n/**\n * TextElement is used to display text/annotations\n */\n\nvar TextElement =\n/** @class */\nfunction (_super) {\n  __extends(TextElement, _super);\n  /**\n   * set the id for each element\n   */\n\n\n  function TextElement() {\n    var _this = _super.call(this) || this;\n    /**\n     * sets or gets the image source\n     */\n\n\n    _this.textContent = '';\n    /** @private */\n\n    _this.canMeasure = true;\n    /** @private */\n\n    _this.canConsiderBounds = true;\n    /** @private */\n\n    _this.doWrap = true;\n    _this.textNodes = [];\n    /**\n     * Defines the appearance of the text element\n     */\n\n    _this.style = {\n      color: 'black',\n      fill: 'transparent',\n      strokeColor: 'black',\n      strokeWidth: 1,\n      fontFamily: 'Arial',\n      fontSize: 12,\n      whiteSpace: 'CollapseSpace',\n      textWrapping: 'WrapWithOverflow',\n      textAlign: 'Center',\n      italic: false,\n      bold: false,\n      textDecoration: 'None',\n      strokeDashArray: '',\n      opacity: 1,\n      textOverflow: 'Wrap'\n    };\n    _this.style.fill = 'transparent';\n    _this.style.strokeColor = 'transparent';\n    return _this;\n  }\n\n  Object.defineProperty(TextElement.prototype, \"content\", {\n    /**\n     * gets the content for the text element\n     */\n    get: function () {\n      return this.textContent;\n    },\n\n    /**\n     * sets the content for the text element\n     */\n    set: function (value) {\n      if (this.textContent !== value) {\n        this.textContent = value;\n        this.isDirt = true;\n        this.doWrap = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextElement.prototype, \"childNodes\", {\n    /**\n     * sets the content for the text element\n     */\n    get: function () {\n      return this.textNodes;\n    },\n\n    /**\n     * gets the content for the text element\n     */\n    set: function (value) {\n      this.textNodes = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextElement.prototype, \"wrapBounds\", {\n    /**\n     * gets the wrapBounds for the text\n     */\n    get: function () {\n      return this.textWrapBounds;\n    },\n\n    /**\n     * sets the wrapBounds for the text\n     */\n    set: function (value) {\n      this.textWrapBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @private */\n\n  TextElement.prototype.refreshTextElement = function () {\n    this.isDirt = true;\n  };\n  /**\n   * Measures the minimum size that is required for the text element\n   * @param availableSize\n   */\n\n\n  TextElement.prototype.measure = function (availableSize) {\n    var size;\n\n    if (this.isDirt && this.canMeasure) {\n      size = measureText(this, this.style, this.content, this.width || availableSize.width);\n    } else {\n      size = this.desiredSize;\n    }\n\n    if (this.width === undefined || this.height === undefined) {\n      this.desiredSize = new Size(size.width, size.height);\n    } else {\n      this.desiredSize = new Size(this.width, this.height);\n    }\n\n    this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n    return this.desiredSize;\n  };\n  /**\n   * Arranges the text element\n   * @param desiredSize\n   */\n\n\n  TextElement.prototype.arrange = function (desiredSize) {\n    if (desiredSize.width !== this.actualSize.width || desiredSize.height !== this.actualSize.height || this.isDirt) {\n      this.doWrap = true;\n    }\n\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    this.isDirt = false;\n    return this.actualSize;\n  };\n\n  return TextElement;\n}(DrawingElement);\n\nexport { TextElement };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Size","DrawingElement","measureText","TextElement","_super","_this","call","textContent","canMeasure","canConsiderBounds","doWrap","textNodes","style","color","fill","strokeColor","strokeWidth","fontFamily","fontSize","whiteSpace","textWrapping","textAlign","italic","bold","textDecoration","strokeDashArray","opacity","textOverflow","defineProperty","get","set","value","isDirt","enumerable","configurable","textWrapBounds","refreshTextElement","measure","availableSize","size","content","width","desiredSize","undefined","height","validateDesiredSize","arrange","actualSize","updateBounds"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/text-element.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Size } from '../../primitives/size';\nimport { DrawingElement } from './drawing-element';\nimport { measureText } from './../../utility/dom-util';\n/**\n * TextElement is used to display text/annotations\n */\nvar TextElement = /** @class */ (function (_super) {\n    __extends(TextElement, _super);\n    /**\n     * set the id for each element\n     */\n    function TextElement() {\n        var _this = _super.call(this) || this;\n        /**\n         * sets or gets the image source\n         */\n        _this.textContent = '';\n        /** @private */\n        _this.canMeasure = true;\n        /** @private */\n        _this.canConsiderBounds = true;\n        /** @private */\n        _this.doWrap = true;\n        _this.textNodes = [];\n        /**\n         * Defines the appearance of the text element\n         */\n        _this.style = {\n            color: 'black', fill: 'transparent', strokeColor: 'black',\n            strokeWidth: 1, fontFamily: 'Arial', fontSize: 12, whiteSpace: 'CollapseSpace',\n            textWrapping: 'WrapWithOverflow', textAlign: 'Center', italic: false, bold: false,\n            textDecoration: 'None', strokeDashArray: '', opacity: 1,\n            textOverflow: 'Wrap'\n        };\n        _this.style.fill = 'transparent';\n        _this.style.strokeColor = 'transparent';\n        return _this;\n    }\n    Object.defineProperty(TextElement.prototype, \"content\", {\n        /**\n         * gets the content for the text element\n         */\n        get: function () {\n            return this.textContent;\n        },\n        /**\n         * sets the content for the text element\n         */\n        set: function (value) {\n            if (this.textContent !== value) {\n                this.textContent = value;\n                this.isDirt = true;\n                this.doWrap = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextElement.prototype, \"childNodes\", {\n        /**\n         * sets the content for the text element\n         */\n        get: function () {\n            return this.textNodes;\n        },\n        /**\n         * gets the content for the text element\n         */\n        set: function (value) {\n            this.textNodes = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextElement.prototype, \"wrapBounds\", {\n        /**\n         * gets the wrapBounds for the text\n         */\n        get: function () {\n            return this.textWrapBounds;\n        },\n        /**\n         * sets the wrapBounds for the text\n         */\n        set: function (value) {\n            this.textWrapBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @private */\n    TextElement.prototype.refreshTextElement = function () {\n        this.isDirt = true;\n    };\n    /**\n     * Measures the minimum size that is required for the text element\n     * @param availableSize\n     */\n    TextElement.prototype.measure = function (availableSize) {\n        var size;\n        if (this.isDirt && this.canMeasure) {\n            size = measureText(this, this.style, this.content, this.width || availableSize.width);\n        }\n        else {\n            size = this.desiredSize;\n        }\n        if (this.width === undefined || this.height === undefined) {\n            this.desiredSize = new Size(size.width, size.height);\n        }\n        else {\n            this.desiredSize = new Size(this.width, this.height);\n        }\n        this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the text element\n     * @param desiredSize\n     */\n    TextElement.prototype.arrange = function (desiredSize) {\n        if (desiredSize.width !== this.actualSize.width || desiredSize.height !== this.actualSize.height || this.isDirt) {\n            this.doWrap = true;\n        }\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        this.isDirt = false;\n        return this.actualSize;\n    };\n    return TextElement;\n}(DrawingElement));\nexport { TextElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}