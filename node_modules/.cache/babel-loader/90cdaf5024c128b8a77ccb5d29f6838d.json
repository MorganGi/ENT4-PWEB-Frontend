{"ast":null,"code":"/**\n * Matrix module is used to transform points based on offsets, angle\n */\n\n/** @private */\nexport var MatrixTypes;\n\n(function (MatrixTypes) {\n  MatrixTypes[MatrixTypes[\"Identity\"] = 0] = \"Identity\";\n  MatrixTypes[MatrixTypes[\"Translation\"] = 1] = \"Translation\";\n  MatrixTypes[MatrixTypes[\"Scaling\"] = 2] = \"Scaling\";\n  MatrixTypes[MatrixTypes[\"Unknown\"] = 4] = \"Unknown\";\n})(MatrixTypes || (MatrixTypes = {}));\n/** @private */\n\n\nvar Matrix =\n/** @class */\nfunction () {\n  function Matrix(m11, m12, m21, m22, offsetX, offsetY, type) {\n    this.m11 = m11;\n    this.m12 = m12;\n    this.m21 = m21;\n    this.m22 = m22;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY; // if (type === undefined) {\n    //     this.type = MatrixTypes.Unknown;\n    // } else {\n    //     this.type = type;\n    // }\n\n    this.type = type;\n  }\n\n  return Matrix;\n}();\n\nexport { Matrix };\n/** @private */\n\nexport function identityMatrix() {\n  return new Matrix(1, 0, 0, 1, 0, 0, MatrixTypes.Identity);\n}\n/** @private */\n\nexport function transformPointByMatrix(matrix, point) {\n  var pt = multiplyPoint(matrix, point.x, point.y);\n  return {\n    x: Math.round(pt.x * 100) / 100,\n    y: Math.round(pt.y * 100) / 100\n  };\n}\n/** @private */\n\nexport function transformPointsByMatrix(matrix, points) {\n  var transformedPoints = [];\n\n  for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n    var point = points_1[_i];\n    transformedPoints.push(transformPointByMatrix(matrix, point));\n  }\n\n  return transformedPoints;\n}\n/** @private */\n\nexport function rotateMatrix(matrix, angle, centerX, centerY) {\n  angle %= 360.0;\n  multiplyMatrix(matrix, createRotationRadians(angle * 0.017453292519943295, centerX ? centerX : 0, centerY ? centerY : 0));\n}\n/** @private */\n\nexport function scaleMatrix(matrix, scaleX, scaleY, centerX, centerY) {\n  if (centerX === void 0) {\n    centerX = 0;\n  }\n\n  if (centerY === void 0) {\n    centerY = 0;\n  }\n\n  multiplyMatrix(matrix, createScaling(scaleX, scaleY, centerX, centerY));\n}\n/** @private */\n\nexport function translateMatrix(matrix, offsetX, offsetY) {\n  if (matrix.type & MatrixTypes.Identity) {\n    matrix.type = MatrixTypes.Translation;\n    setMatrix(matrix, 1.0, 0.0, 0.0, 1.0, offsetX, offsetY);\n    return;\n  }\n\n  if (matrix.type & MatrixTypes.Unknown) {\n    matrix.offsetX += offsetX;\n    matrix.offsetY += offsetY;\n    return;\n  }\n\n  matrix.offsetX += offsetX;\n  matrix.offsetY += offsetY;\n  matrix.type |= MatrixTypes.Translation;\n}\n/** @private */\n\nfunction createScaling(scaleX, scaleY, centerX, centerY) {\n  var result = identityMatrix();\n  result.type = !(centerX || centerY) ? MatrixTypes.Scaling : MatrixTypes.Scaling | MatrixTypes.Translation;\n  setMatrix(result, scaleX, 0.0, 0.0, scaleY, centerX - scaleX * centerX, centerY - scaleY * centerY);\n  return result;\n}\n/** @private */\n\n\nfunction createRotationRadians(angle, centerX, centerY) {\n  var result = identityMatrix();\n  var num = Math.sin(angle);\n  var num2 = Math.cos(angle);\n  var offsetX = centerX * (1.0 - num2) + centerY * num;\n  var offsetY = centerY * (1.0 - num2) - centerX * num;\n  result.type = MatrixTypes.Unknown;\n  setMatrix(result, num2, num, -num, num2, offsetX, offsetY);\n  return result;\n}\n/** @private */\n\n\nfunction multiplyPoint(matrix, x, y) {\n  switch (matrix.type) {\n    case MatrixTypes.Identity:\n      break;\n\n    case MatrixTypes.Translation:\n      x += matrix.offsetX;\n      y += matrix.offsetY;\n      break;\n\n    case MatrixTypes.Scaling:\n      x *= matrix.m11;\n      y *= matrix.m22;\n      break;\n\n    case MatrixTypes.Translation | MatrixTypes.Scaling:\n      x *= matrix.m11;\n      x += matrix.offsetX;\n      y *= matrix.m22;\n      y += matrix.offsetY;\n      break;\n\n    default:\n      var num = y * matrix.m21 + matrix.offsetX;\n      var num2 = x * matrix.m12 + matrix.offsetY;\n      x *= matrix.m11;\n      x += num;\n      y *= matrix.m22;\n      y += num2;\n      break;\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n/** @private */\n\n\nexport function multiplyMatrix(matrix1, matrix2) {\n  var type = matrix1.type;\n  var type2 = matrix2.type;\n\n  if (type2 === MatrixTypes.Identity) {\n    return;\n  }\n\n  if (type === MatrixTypes.Identity) {\n    assignMatrix(matrix1, matrix2);\n    matrix1.type = matrix2.type;\n    return;\n  }\n\n  if (type2 === MatrixTypes.Translation) {\n    matrix1.offsetX += matrix2.offsetX;\n    matrix1.offsetY += matrix2.offsetY;\n\n    if (type !== MatrixTypes.Unknown) {\n      matrix1.type |= MatrixTypes.Translation;\n    }\n\n    return;\n  }\n\n  if (type !== MatrixTypes.Translation) {\n    var num = type << 4 | type2;\n\n    switch (num) {\n      case 34:\n        matrix1.m11 *= matrix2.m11;\n        matrix1.m22 *= matrix2.m22;\n        return;\n\n      case 35:\n        matrix1.m11 *= matrix2.m11;\n        matrix1.m22 *= matrix2.m22;\n        matrix1.offsetX = matrix2.offsetX;\n        matrix1.offsetY = matrix2.offsetY;\n        matrix1.type = MatrixTypes.Translation | MatrixTypes.Scaling;\n        return;\n\n      case 36:\n        break;\n\n      default:\n        {\n          switch (num) {\n            case 50:\n              matrix1.m11 *= matrix2.m11;\n              matrix1.m22 *= matrix2.m22;\n              matrix1.offsetX *= matrix2.m11;\n              matrix1.offsetY *= matrix2.m22;\n              return;\n\n            case 51:\n              matrix1.m11 *= matrix2.m11;\n              matrix1.m22 *= matrix2.m22;\n              matrix1.offsetX = matrix2.m11 * matrix1.offsetX + matrix2.offsetX;\n              matrix1.offsetY = matrix2.m22 * matrix1.offsetY + matrix2.offsetY;\n              return;\n\n            case 52:\n              break;\n\n            default:\n              switch (num) {\n                case 66:\n                case 67:\n                case 68:\n                  break;\n\n                default:\n                  return;\n              }\n\n              break;\n          }\n\n          break;\n        }\n    }\n\n    var result = identityMatrix();\n    var m11New = matrix1.m11 * matrix2.m11 + matrix1.m12 * matrix2.m21;\n    var m12New = matrix1.m11 * matrix2.m12 + matrix1.m12 * matrix2.m22;\n    var m21New = matrix1.m21 * matrix2.m11 + matrix1.m22 * matrix2.m21;\n    var m22New = matrix1.m21 * matrix2.m12 + matrix1.m22 * matrix2.m22;\n    var offsetX_1 = matrix1.offsetX * matrix2.m11 + matrix1.offsetY * matrix2.m21 + matrix2.offsetX;\n    var offsetY_1 = matrix1.offsetX * matrix2.m12 + matrix1.offsetY * matrix2.m22 + matrix2.offsetY;\n    setMatrix(result, m11New, m12New, m21New, m22New, offsetX_1, offsetY_1);\n\n    if (result.m21 || result.m12) {\n      result.type = MatrixTypes.Unknown;\n    } else {\n      if (result.m11 && result.m11 !== 1.0 || result.m22 && result.m22 !== 1.0) {\n        result.type = MatrixTypes.Scaling;\n      }\n\n      if (result.offsetX || result.offsetY) {\n        result.type |= MatrixTypes.Translation;\n      }\n\n      if ((result.type & (MatrixTypes.Translation | MatrixTypes.Scaling)) === MatrixTypes.Identity) {\n        result.type = MatrixTypes.Identity;\n      }\n\n      result.type = MatrixTypes.Scaling | MatrixTypes.Translation;\n    }\n\n    assignMatrix(matrix1, result);\n    matrix1.type = result.type;\n    return;\n  }\n\n  var offsetX = matrix1.offsetX;\n  var offsetY = matrix1.offsetY;\n  matrix1.offsetX = offsetX * matrix2.m11 + offsetY * matrix2.m21 + matrix2.offsetX;\n  matrix1.offsetY = offsetX * matrix2.m12 + offsetY * matrix2.m22 + matrix2.offsetY;\n\n  if (type2 === MatrixTypes.Unknown) {\n    matrix1.type = MatrixTypes.Unknown;\n    return;\n  }\n\n  matrix1.type = MatrixTypes.Translation | MatrixTypes.Scaling;\n}\n/** @private */\n\nfunction setMatrix(mat, m11, m12, m21, m22, x, y) {\n  mat.m11 = m11;\n  mat.m12 = m12;\n  mat.m21 = m21;\n  mat.m22 = m22;\n  mat.offsetX = x;\n  mat.offsetY = y;\n}\n/** @private */\n\n\nfunction assignMatrix(matrix1, matrix2) {\n  matrix1.m11 = matrix2.m11;\n  matrix1.m12 = matrix2.m12;\n  matrix1.m21 = matrix2.m21;\n  matrix1.m22 = matrix2.m22;\n  matrix1.offsetX = matrix2.offsetX;\n  matrix1.offsetY = matrix2.offsetY;\n  matrix1.type = matrix2.type;\n}","map":{"version":3,"names":["MatrixTypes","Matrix","m11","m12","m21","m22","offsetX","offsetY","type","identityMatrix","Identity","transformPointByMatrix","matrix","point","pt","multiplyPoint","x","y","Math","round","transformPointsByMatrix","points","transformedPoints","_i","points_1","length","push","rotateMatrix","angle","centerX","centerY","multiplyMatrix","createRotationRadians","scaleMatrix","scaleX","scaleY","createScaling","translateMatrix","Translation","setMatrix","Unknown","result","Scaling","num","sin","num2","cos","matrix1","matrix2","type2","assignMatrix","m11New","m12New","m21New","m22New","offsetX_1","offsetY_1","mat"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-drawings/src/drawing/primitives/matrix.js"],"sourcesContent":["/**\n * Matrix module is used to transform points based on offsets, angle\n */\n/** @private */\nexport var MatrixTypes;\n(function (MatrixTypes) {\n    MatrixTypes[MatrixTypes[\"Identity\"] = 0] = \"Identity\";\n    MatrixTypes[MatrixTypes[\"Translation\"] = 1] = \"Translation\";\n    MatrixTypes[MatrixTypes[\"Scaling\"] = 2] = \"Scaling\";\n    MatrixTypes[MatrixTypes[\"Unknown\"] = 4] = \"Unknown\";\n})(MatrixTypes || (MatrixTypes = {}));\n/** @private */\nvar Matrix = /** @class */ (function () {\n    function Matrix(m11, m12, m21, m22, offsetX, offsetY, type) {\n        this.m11 = m11;\n        this.m12 = m12;\n        this.m21 = m21;\n        this.m22 = m22;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        // if (type === undefined) {\n        //     this.type = MatrixTypes.Unknown;\n        // } else {\n        //     this.type = type;\n        // }\n        this.type = type;\n    }\n    return Matrix;\n}());\nexport { Matrix };\n/** @private */\nexport function identityMatrix() {\n    return new Matrix(1, 0, 0, 1, 0, 0, MatrixTypes.Identity);\n}\n/** @private */\nexport function transformPointByMatrix(matrix, point) {\n    var pt = multiplyPoint(matrix, point.x, point.y);\n    return { x: Math.round(pt.x * 100) / 100, y: Math.round(pt.y * 100) / 100 };\n}\n/** @private */\nexport function transformPointsByMatrix(matrix, points) {\n    var transformedPoints = [];\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n        var point = points_1[_i];\n        transformedPoints.push(transformPointByMatrix(matrix, point));\n    }\n    return transformedPoints;\n}\n/** @private */\nexport function rotateMatrix(matrix, angle, centerX, centerY) {\n    angle %= 360.0;\n    multiplyMatrix(matrix, createRotationRadians(angle * 0.017453292519943295, centerX ? centerX : 0, centerY ? centerY : 0));\n}\n/** @private */\nexport function scaleMatrix(matrix, scaleX, scaleY, centerX, centerY) {\n    if (centerX === void 0) { centerX = 0; }\n    if (centerY === void 0) { centerY = 0; }\n    multiplyMatrix(matrix, createScaling(scaleX, scaleY, centerX, centerY));\n}\n/** @private */\nexport function translateMatrix(matrix, offsetX, offsetY) {\n    if (matrix.type & MatrixTypes.Identity) {\n        matrix.type = MatrixTypes.Translation;\n        setMatrix(matrix, 1.0, 0.0, 0.0, 1.0, offsetX, offsetY);\n        return;\n    }\n    if (matrix.type & MatrixTypes.Unknown) {\n        matrix.offsetX += offsetX;\n        matrix.offsetY += offsetY;\n        return;\n    }\n    matrix.offsetX += offsetX;\n    matrix.offsetY += offsetY;\n    matrix.type |= MatrixTypes.Translation;\n}\n/** @private */\nfunction createScaling(scaleX, scaleY, centerX, centerY) {\n    var result = identityMatrix();\n    result.type = !(centerX || centerY) ? MatrixTypes.Scaling : MatrixTypes.Scaling | MatrixTypes.Translation;\n    setMatrix(result, scaleX, 0.0, 0.0, scaleY, centerX - scaleX * centerX, centerY - scaleY * centerY);\n    return result;\n}\n/** @private */\nfunction createRotationRadians(angle, centerX, centerY) {\n    var result = identityMatrix();\n    var num = Math.sin(angle);\n    var num2 = Math.cos(angle);\n    var offsetX = centerX * (1.0 - num2) + centerY * num;\n    var offsetY = centerY * (1.0 - num2) - centerX * num;\n    result.type = MatrixTypes.Unknown;\n    setMatrix(result, num2, num, -num, num2, offsetX, offsetY);\n    return result;\n}\n/** @private */\nfunction multiplyPoint(matrix, x, y) {\n    switch (matrix.type) {\n        case MatrixTypes.Identity: break;\n        case MatrixTypes.Translation:\n            x += matrix.offsetX;\n            y += matrix.offsetY;\n            break;\n        case MatrixTypes.Scaling:\n            x *= matrix.m11;\n            y *= matrix.m22;\n            break;\n        case MatrixTypes.Translation | MatrixTypes.Scaling:\n            x *= matrix.m11;\n            x += matrix.offsetX;\n            y *= matrix.m22;\n            y += matrix.offsetY;\n            break;\n        default:\n            var num = y * matrix.m21 + matrix.offsetX;\n            var num2 = x * matrix.m12 + matrix.offsetY;\n            x *= matrix.m11;\n            x += num;\n            y *= matrix.m22;\n            y += num2;\n            break;\n    }\n    return { x: x, y: y };\n}\n/** @private */\nexport function multiplyMatrix(matrix1, matrix2) {\n    var type = matrix1.type;\n    var type2 = matrix2.type;\n    if (type2 === MatrixTypes.Identity) {\n        return;\n    }\n    if (type === MatrixTypes.Identity) {\n        assignMatrix(matrix1, matrix2);\n        matrix1.type = matrix2.type;\n        return;\n    }\n    if (type2 === MatrixTypes.Translation) {\n        matrix1.offsetX += matrix2.offsetX;\n        matrix1.offsetY += matrix2.offsetY;\n        if (type !== MatrixTypes.Unknown) {\n            matrix1.type |= MatrixTypes.Translation;\n        }\n        return;\n    }\n    if (type !== MatrixTypes.Translation) {\n        var num = type << 4 | type2;\n        switch (num) {\n            case 34:\n                matrix1.m11 *= matrix2.m11;\n                matrix1.m22 *= matrix2.m22;\n                return;\n            case 35:\n                matrix1.m11 *= matrix2.m11;\n                matrix1.m22 *= matrix2.m22;\n                matrix1.offsetX = matrix2.offsetX;\n                matrix1.offsetY = matrix2.offsetY;\n                matrix1.type = (MatrixTypes.Translation | MatrixTypes.Scaling);\n                return;\n            case 36: break;\n            default:\n                {\n                    switch (num) {\n                        case 50:\n                            matrix1.m11 *= matrix2.m11;\n                            matrix1.m22 *= matrix2.m22;\n                            matrix1.offsetX *= matrix2.m11;\n                            matrix1.offsetY *= matrix2.m22;\n                            return;\n                        case 51:\n                            matrix1.m11 *= matrix2.m11;\n                            matrix1.m22 *= matrix2.m22;\n                            matrix1.offsetX = matrix2.m11 * matrix1.offsetX + matrix2.offsetX;\n                            matrix1.offsetY = matrix2.m22 * matrix1.offsetY + matrix2.offsetY;\n                            return;\n                        case 52: break;\n                        default:\n                            switch (num) {\n                                case 66:\n                                case 67:\n                                case 68: break;\n                                default: return;\n                            }\n                            break;\n                    }\n                    break;\n                }\n        }\n        var result = identityMatrix();\n        var m11New = matrix1.m11 * matrix2.m11 + matrix1.m12 * matrix2.m21;\n        var m12New = matrix1.m11 * matrix2.m12 + matrix1.m12 * matrix2.m22;\n        var m21New = matrix1.m21 * matrix2.m11 + matrix1.m22 * matrix2.m21;\n        var m22New = matrix1.m21 * matrix2.m12 + matrix1.m22 * matrix2.m22;\n        var offsetX_1 = matrix1.offsetX * matrix2.m11 + matrix1.offsetY * matrix2.m21 + matrix2.offsetX;\n        var offsetY_1 = matrix1.offsetX * matrix2.m12 + matrix1.offsetY * matrix2.m22 + matrix2.offsetY;\n        setMatrix(result, m11New, m12New, m21New, m22New, offsetX_1, offsetY_1);\n        if (result.m21 || result.m12) {\n            result.type = MatrixTypes.Unknown;\n        }\n        else {\n            if (result.m11 && result.m11 !== 1.0 || result.m22 && result.m22 !== 1.0) {\n                result.type = MatrixTypes.Scaling;\n            }\n            if (result.offsetX || result.offsetY) {\n                result.type |= MatrixTypes.Translation;\n            }\n            if ((result.type & (MatrixTypes.Translation | MatrixTypes.Scaling)) === MatrixTypes.Identity) {\n                result.type = MatrixTypes.Identity;\n            }\n            result.type = MatrixTypes.Scaling | MatrixTypes.Translation;\n        }\n        assignMatrix(matrix1, result);\n        matrix1.type = result.type;\n        return;\n    }\n    var offsetX = matrix1.offsetX;\n    var offsetY = matrix1.offsetY;\n    matrix1.offsetX = offsetX * matrix2.m11 + offsetY * matrix2.m21 + matrix2.offsetX;\n    matrix1.offsetY = offsetX * matrix2.m12 + offsetY * matrix2.m22 + matrix2.offsetY;\n    if (type2 === MatrixTypes.Unknown) {\n        matrix1.type = MatrixTypes.Unknown;\n        return;\n    }\n    matrix1.type = (MatrixTypes.Translation | MatrixTypes.Scaling);\n}\n/** @private */\nfunction setMatrix(mat, m11, m12, m21, m22, x, y) {\n    mat.m11 = m11;\n    mat.m12 = m12;\n    mat.m21 = m21;\n    mat.m22 = m22;\n    mat.offsetX = x;\n    mat.offsetY = y;\n}\n/** @private */\nfunction assignMatrix(matrix1, matrix2) {\n    matrix1.m11 = matrix2.m11;\n    matrix1.m12 = matrix2.m12;\n    matrix1.m21 = matrix2.m21;\n    matrix1.m22 = matrix2.m22;\n    matrix1.offsetX = matrix2.offsetX;\n    matrix1.offsetY = matrix2.offsetY;\n    matrix1.type = matrix2.type;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}