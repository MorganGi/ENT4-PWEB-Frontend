{"ast":null,"code":"import { PathElement } from '../core/elements/path-element';\nimport { TextElement } from '../core/elements/text-element';\nimport { Container } from '../core/containers/container';\nimport { wordBreakToString, whiteSpaceToString, textAlignToString } from '../utility/base-util';\nimport { getDiagramElement } from '../utility/dom-util';\nimport { CanvasRenderer } from './canvas-renderer';\nimport { ImageElement } from '../core/elements/image-element';\n/**\n * Renderer module is used to render basic diagram elements\n */\n\n/** @private */\n\nvar DrawingRenderer =\n/** @class */\nfunction () {\n  function DrawingRenderer(name, isSvgMode) {\n    /**   @private  */\n    this.renderer = null; // private svgRenderer: SvgRenderer;\n\n    /** @private */\n\n    this.isSvgMode = true;\n    this.diagramId = name;\n    this.element = getDiagramElement(this.diagramId);\n    this.isSvgMode = isSvgMode;\n    this.renderer = new CanvasRenderer(); //  this.svgRenderer = new SvgRenderer();\n  } // /** @private */\n  // public setLayers(): void {\n  //     this.adornerSvgLayer = this.element.getElementsByClassName('e-adorner-layer')[0] as SVGSVGElement;\n  // }\n\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.renderElement = function (element, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue) {\n    var isElement = true;\n\n    if (element instanceof Container) {\n      isElement = false;\n      this.renderContainer(element, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue);\n    } else if (element instanceof ImageElement) {\n      this.renderImageElement(element, canvas, transform, parentSvg, fromPalette);\n    } else if (element instanceof PathElement) {\n      this.renderPathElement(element, canvas, transform, parentSvg, fromPalette);\n    } else if (element instanceof TextElement) {\n      this.renderTextElement(element, canvas, transform, parentSvg, fromPalette);\n    } else {\n      this.renderRect(element, canvas, transform, parentSvg);\n    }\n  };\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.renderImageElement = function (element, canvas, transform, parentSvg, fromPalette) {\n    var options = this.getBaseAttributes(element, transform);\n    options.cornerRadius = 0;\n    this.renderer.drawRectangle(canvas, options); // let sx: number; let sy: number;\n\n    var imageWidth;\n    var imageHeight;\n    var sourceWidth;\n    var sourceHeight;\n\n    if (element.stretch === 'Stretch') {\n      imageWidth = element.actualSize.width;\n      imageHeight = element.actualSize.height;\n    } else {\n      var contentWidth = element.contentSize.width;\n      var contentHeight = element.contentSize.height;\n      var widthRatio = options.width / contentWidth;\n      var heightRatio = options.height / contentHeight;\n      var ratio = void 0;\n\n      switch (element.stretch) {\n        case 'Meet':\n          ratio = Math.min(widthRatio, heightRatio);\n          imageWidth = contentWidth * ratio;\n          imageHeight = contentHeight * ratio;\n          options.x += Math.abs(options.width - imageWidth) / 2;\n          options.y += Math.abs(options.height - imageHeight) / 2;\n          break;\n\n        case 'Slice':\n          widthRatio = options.width / contentWidth;\n          heightRatio = options.height / contentHeight;\n          ratio = Math.max(widthRatio, heightRatio);\n          imageWidth = contentWidth * ratio;\n          imageHeight = contentHeight * ratio;\n          sourceWidth = options.width / imageWidth * contentWidth;\n          sourceHeight = options.height / imageHeight * contentHeight;\n          break;\n\n        case 'None':\n          imageWidth = contentWidth;\n          imageHeight = contentHeight;\n          break;\n      }\n    }\n\n    options.width = imageWidth;\n    options.height = imageHeight; //Commented for code coverage\n    //(options as ImageAttributes).sourceX = sx;\n    //(options as ImageAttrib                                                                           utes).sourceY = sy;\n\n    options.sourceWidth = sourceWidth;\n    options.sourceHeight = sourceHeight;\n    options.source = element.source;\n    options.alignment = element.imageAlign;\n    options.scale = element.imageScale;\n    this.renderer.drawImage(canvas, options, parentSvg, fromPalette);\n  };\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.renderPathElement = function (element, canvas, transform, parentSvg, fromPalette) {\n    var options = this.getBaseAttributes(element, transform);\n    options.data = element.absolutePath;\n    options.data = element.absolutePath;\n    var ariaLabel = element.id;\n\n    if (!this.isSvgMode) {\n      options.x = options.x;\n      options.y = options.y;\n    }\n\n    this.renderer.drawPath(canvas, options);\n  };\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.renderTextElement = function (element, canvas, transform, parentSvg, fromPalette) {\n    var options = this.getBaseAttributes(element, transform);\n    options.cornerRadius = 0;\n    options.whiteSpace = whiteSpaceToString(element.style.whiteSpace, element.style.textWrapping);\n    options.content = element.content;\n    options.breakWord = wordBreakToString(element.style.textWrapping);\n    options.textAlign = textAlignToString(element.style.textAlign);\n    options.color = element.style.color;\n    options.italic = element.style.italic;\n    options.bold = element.style.bold;\n    options.fontSize = element.style.fontSize;\n    options.fontFamily = element.style.fontFamily;\n    options.textOverflow = element.style.textOverflow;\n    options.textDecoration = element.style.textDecoration;\n    options.doWrap = element.doWrap;\n    options.wrapBounds = element.wrapBounds;\n    options.childNodes = element.childNodes;\n    options.dashArray = '';\n    options.strokeWidth = 0;\n    options.fill = element.style.fill;\n    var ariaLabel = element.content ? element.content : element.id;\n    this.renderer.drawRectangle(canvas, options);\n    this.renderer.drawText(canvas, options);\n  };\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.renderContainer = function (group, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue) {\n    transform = {\n      tx: 0,\n      ty: 0,\n      scale: 1\n    };\n    var svgParent = {\n      svg: parentSvg,\n      g: canvas\n    };\n\n    if (this.diagramId) {\n      parentSvg = parentSvg;\n    }\n\n    this.renderRect(group, canvas, transform, parentSvg);\n\n    if (group.hasChildren()) {\n      var parentG = void 0;\n      var svgParent_1;\n\n      for (var _i = 0, _a = group.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        this.renderElement(child, parentG || canvas, htmlLayer, transform, parentSvg, true, fromPalette, indexValue);\n      }\n    }\n  };\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.renderRect = function (element, canvas, transform, parentSvg) {\n    var options = this.getBaseAttributes(element, transform);\n    options.cornerRadius = element.cornerRadius || 0;\n    var ariaLabel = element.id;\n    this.renderer.drawRectangle(canvas, options);\n  };\n  /**   @private  */\n\n\n  DrawingRenderer.prototype.getBaseAttributes = function (element, transform) {\n    var options = {\n      width: element.actualSize.width,\n      height: element.actualSize.height,\n      x: element.offsetX - element.actualSize.width * element.pivot.x + 0.5,\n      y: element.offsetY - element.actualSize.height * element.pivot.y + 0.5,\n      fill: element.style.fill,\n      stroke: element.style.strokeColor,\n      angle: element.rotateAngle + element.parentTransform,\n      pivotX: element.pivot.x,\n      pivotY: element.pivot.y,\n      strokeWidth: element.style.strokeWidth,\n      dashArray: element.style.strokeDashArray || '',\n      opacity: element.style.opacity,\n      visible: element.visible,\n      id: element.id,\n      gradient: element.style.gradient\n    };\n\n    if (transform) {\n      options.x += transform.tx;\n      options.y += transform.ty;\n    }\n\n    return options;\n  };\n\n  return DrawingRenderer;\n}();\n\nexport { DrawingRenderer };","map":{"version":3,"names":["PathElement","TextElement","Container","wordBreakToString","whiteSpaceToString","textAlignToString","getDiagramElement","CanvasRenderer","ImageElement","DrawingRenderer","name","isSvgMode","renderer","diagramId","element","prototype","renderElement","canvas","htmlLayer","transform","parentSvg","createParent","fromPalette","indexValue","isElement","renderContainer","renderImageElement","renderPathElement","renderTextElement","renderRect","options","getBaseAttributes","cornerRadius","drawRectangle","imageWidth","imageHeight","sourceWidth","sourceHeight","stretch","actualSize","width","height","contentWidth","contentSize","contentHeight","widthRatio","heightRatio","ratio","Math","min","x","abs","y","max","source","alignment","imageAlign","scale","imageScale","drawImage","data","absolutePath","ariaLabel","id","drawPath","whiteSpace","style","textWrapping","content","breakWord","textAlign","color","italic","bold","fontSize","fontFamily","textOverflow","textDecoration","doWrap","wrapBounds","childNodes","dashArray","strokeWidth","fill","drawText","group","tx","ty","svgParent","svg","g","hasChildren","parentG","svgParent_1","_i","_a","children","length","child","offsetX","pivot","offsetY","stroke","strokeColor","angle","rotateAngle","parentTransform","pivotX","pivotY","strokeDashArray","opacity","visible","gradient"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-drawings/src/drawing/rendering/renderer.js"],"sourcesContent":["import { PathElement } from '../core/elements/path-element';\nimport { TextElement } from '../core/elements/text-element';\nimport { Container } from '../core/containers/container';\nimport { wordBreakToString, whiteSpaceToString, textAlignToString } from '../utility/base-util';\nimport { getDiagramElement } from '../utility/dom-util';\nimport { CanvasRenderer } from './canvas-renderer';\nimport { ImageElement } from '../core/elements/image-element';\n/**\n * Renderer module is used to render basic diagram elements\n */\n/** @private */\nvar DrawingRenderer = /** @class */ (function () {\n    function DrawingRenderer(name, isSvgMode) {\n        /**   @private  */\n        this.renderer = null;\n        // private svgRenderer: SvgRenderer;\n        /** @private */\n        this.isSvgMode = true;\n        this.diagramId = name;\n        this.element = getDiagramElement(this.diagramId);\n        this.isSvgMode = isSvgMode;\n        this.renderer = new CanvasRenderer();\n        //  this.svgRenderer = new SvgRenderer();\n    }\n    // /** @private */\n    // public setLayers(): void {\n    //     this.adornerSvgLayer = this.element.getElementsByClassName('e-adorner-layer')[0] as SVGSVGElement;\n    // }\n    /**   @private  */\n    DrawingRenderer.prototype.renderElement = function (element, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue) {\n        var isElement = true;\n        if (element instanceof Container) {\n            isElement = false;\n            this.renderContainer(element, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue);\n        }\n        else if (element instanceof ImageElement) {\n            this.renderImageElement(element, canvas, transform, parentSvg, fromPalette);\n        }\n        else if (element instanceof PathElement) {\n            this.renderPathElement(element, canvas, transform, parentSvg, fromPalette);\n        }\n        else if (element instanceof TextElement) {\n            this.renderTextElement(element, canvas, transform, parentSvg, fromPalette);\n        }\n        else {\n            this.renderRect(element, canvas, transform, parentSvg);\n        }\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderImageElement = function (element, canvas, transform, parentSvg, fromPalette) {\n        var options = this.getBaseAttributes(element, transform);\n        options.cornerRadius = 0;\n        this.renderer.drawRectangle(canvas, options);\n        // let sx: number; let sy: number;\n        var imageWidth;\n        var imageHeight;\n        var sourceWidth;\n        var sourceHeight;\n        if (element.stretch === 'Stretch') {\n            imageWidth = element.actualSize.width;\n            imageHeight = element.actualSize.height;\n        }\n        else {\n            var contentWidth = element.contentSize.width;\n            var contentHeight = element.contentSize.height;\n            var widthRatio = options.width / contentWidth;\n            var heightRatio = options.height / contentHeight;\n            var ratio = void 0;\n            switch (element.stretch) {\n                case 'Meet':\n                    ratio = Math.min(widthRatio, heightRatio);\n                    imageWidth = contentWidth * ratio;\n                    imageHeight = contentHeight * ratio;\n                    options.x += Math.abs(options.width - imageWidth) / 2;\n                    options.y += Math.abs(options.height - imageHeight) / 2;\n                    break;\n                case 'Slice':\n                    widthRatio = options.width / contentWidth;\n                    heightRatio = options.height / contentHeight;\n                    ratio = Math.max(widthRatio, heightRatio);\n                    imageWidth = contentWidth * ratio;\n                    imageHeight = contentHeight * ratio;\n                    sourceWidth = options.width / imageWidth * contentWidth;\n                    sourceHeight = options.height / imageHeight * contentHeight;\n                    break;\n                case 'None':\n                    imageWidth = contentWidth;\n                    imageHeight = contentHeight;\n                    break;\n            }\n        }\n        options.width = imageWidth;\n        options.height = imageHeight;\n        //Commented for code coverage\n        //(options as ImageAttributes).sourceX = sx;\n        //(options as ImageAttrib                                                                           utes).sourceY = sy;\n        options.sourceWidth = sourceWidth;\n        options.sourceHeight = sourceHeight;\n        options.source = element.source;\n        options.alignment = element.imageAlign;\n        options.scale = element.imageScale;\n        this.renderer.drawImage(canvas, options, parentSvg, fromPalette);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderPathElement = function (element, canvas, transform, parentSvg, fromPalette) {\n        var options = this.getBaseAttributes(element, transform);\n        options.data = element.absolutePath;\n        options.data = element.absolutePath;\n        var ariaLabel = element.id;\n        if (!this.isSvgMode) {\n            options.x = options.x;\n            options.y = options.y;\n        }\n        this.renderer.drawPath(canvas, options);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderTextElement = function (element, canvas, transform, parentSvg, fromPalette) {\n        var options = this.getBaseAttributes(element, transform);\n        options.cornerRadius = 0;\n        options.whiteSpace = whiteSpaceToString(element.style.whiteSpace, element.style.textWrapping);\n        options.content = element.content;\n        options.breakWord = wordBreakToString(element.style.textWrapping);\n        options.textAlign = textAlignToString(element.style.textAlign);\n        options.color = element.style.color;\n        options.italic = element.style.italic;\n        options.bold = element.style.bold;\n        options.fontSize = element.style.fontSize;\n        options.fontFamily = element.style.fontFamily;\n        options.textOverflow = element.style.textOverflow;\n        options.textDecoration = element.style.textDecoration;\n        options.doWrap = element.doWrap;\n        options.wrapBounds = element.wrapBounds;\n        options.childNodes = element.childNodes;\n        options.dashArray = '';\n        options.strokeWidth = 0;\n        options.fill = element.style.fill;\n        var ariaLabel = element.content ? element.content : element.id;\n        this.renderer.drawRectangle(canvas, options);\n        this.renderer.drawText(canvas, options);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderContainer = function (group, canvas, htmlLayer, transform, parentSvg, createParent, fromPalette, indexValue) {\n        transform = { tx: 0, ty: 0, scale: 1 };\n        var svgParent = { svg: parentSvg, g: canvas };\n        if (this.diagramId) {\n            parentSvg = parentSvg;\n        }\n        this.renderRect(group, canvas, transform, parentSvg);\n        if (group.hasChildren()) {\n            var parentG = void 0;\n            var svgParent_1;\n            for (var _i = 0, _a = group.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                this.renderElement(child, parentG || canvas, htmlLayer, transform, parentSvg, true, fromPalette, indexValue);\n            }\n        }\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.renderRect = function (element, canvas, transform, parentSvg) {\n        var options = this.getBaseAttributes(element, transform);\n        options.cornerRadius = element.cornerRadius || 0;\n        var ariaLabel = element.id;\n        this.renderer.drawRectangle(canvas, options);\n    };\n    /**   @private  */\n    DrawingRenderer.prototype.getBaseAttributes = function (element, transform) {\n        var options = {\n            width: element.actualSize.width, height: element.actualSize.height,\n            x: element.offsetX - element.actualSize.width * element.pivot.x + 0.5,\n            y: element.offsetY - element.actualSize.height * element.pivot.y + 0.5,\n            fill: element.style.fill, stroke: element.style.strokeColor, angle: element.rotateAngle + element.parentTransform,\n            pivotX: element.pivot.x, pivotY: element.pivot.y, strokeWidth: element.style.strokeWidth,\n            dashArray: element.style.strokeDashArray || '', opacity: element.style.opacity,\n            visible: element.visible, id: element.id, gradient: element.style.gradient,\n        };\n        if (transform) {\n            options.x += transform.tx;\n            options.y += transform.ty;\n        }\n        return options;\n    };\n    return DrawingRenderer;\n}());\nexport { DrawingRenderer };\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,+BAA5B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,EAAgDC,iBAAhD,QAAyE,sBAAzE;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA;AACA;AACA;;AACA;;AACA,IAAIC,eAAe;AAAG;AAAe,YAAY;EAC7C,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,SAA/B,EAA0C;IACtC;IACA,KAAKC,QAAL,GAAgB,IAAhB,CAFsC,CAGtC;;IACA;;IACA,KAAKD,SAAL,GAAiB,IAAjB;IACA,KAAKE,SAAL,GAAiBH,IAAjB;IACA,KAAKI,OAAL,GAAeR,iBAAiB,CAAC,KAAKO,SAAN,CAAhC;IACA,KAAKF,SAAL,GAAiBA,SAAjB;IACA,KAAKC,QAAL,GAAgB,IAAIL,cAAJ,EAAhB,CATsC,CAUtC;EACH,CAZ4C,CAa7C;EACA;EACA;EACA;;EACA;;;EACAE,eAAe,CAACM,SAAhB,CAA0BC,aAA1B,GAA0C,UAAUF,OAAV,EAAmBG,MAAnB,EAA2BC,SAA3B,EAAsCC,SAAtC,EAAiDC,SAAjD,EAA4DC,YAA5D,EAA0EC,WAA1E,EAAuFC,UAAvF,EAAmG;IACzI,IAAIC,SAAS,GAAG,IAAhB;;IACA,IAAIV,OAAO,YAAYZ,SAAvB,EAAkC;MAC9BsB,SAAS,GAAG,KAAZ;MACA,KAAKC,eAAL,CAAqBX,OAArB,EAA8BG,MAA9B,EAAsCC,SAAtC,EAAiDC,SAAjD,EAA4DC,SAA5D,EAAuEC,YAAvE,EAAqFC,WAArF,EAAkGC,UAAlG;IACH,CAHD,MAIK,IAAIT,OAAO,YAAYN,YAAvB,EAAqC;MACtC,KAAKkB,kBAAL,CAAwBZ,OAAxB,EAAiCG,MAAjC,EAAyCE,SAAzC,EAAoDC,SAApD,EAA+DE,WAA/D;IACH,CAFI,MAGA,IAAIR,OAAO,YAAYd,WAAvB,EAAoC;MACrC,KAAK2B,iBAAL,CAAuBb,OAAvB,EAAgCG,MAAhC,EAAwCE,SAAxC,EAAmDC,SAAnD,EAA8DE,WAA9D;IACH,CAFI,MAGA,IAAIR,OAAO,YAAYb,WAAvB,EAAoC;MACrC,KAAK2B,iBAAL,CAAuBd,OAAvB,EAAgCG,MAAhC,EAAwCE,SAAxC,EAAmDC,SAAnD,EAA8DE,WAA9D;IACH,CAFI,MAGA;MACD,KAAKO,UAAL,CAAgBf,OAAhB,EAAyBG,MAAzB,EAAiCE,SAAjC,EAA4CC,SAA5C;IACH;EACJ,CAlBD;EAmBA;;;EACAX,eAAe,CAACM,SAAhB,CAA0BW,kBAA1B,GAA+C,UAAUZ,OAAV,EAAmBG,MAAnB,EAA2BE,SAA3B,EAAsCC,SAAtC,EAAiDE,WAAjD,EAA8D;IACzG,IAAIQ,OAAO,GAAG,KAAKC,iBAAL,CAAuBjB,OAAvB,EAAgCK,SAAhC,CAAd;IACAW,OAAO,CAACE,YAAR,GAAuB,CAAvB;IACA,KAAKpB,QAAL,CAAcqB,aAAd,CAA4BhB,MAA5B,EAAoCa,OAApC,EAHyG,CAIzG;;IACA,IAAII,UAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,YAAJ;;IACA,IAAIvB,OAAO,CAACwB,OAAR,KAAoB,SAAxB,EAAmC;MAC/BJ,UAAU,GAAGpB,OAAO,CAACyB,UAAR,CAAmBC,KAAhC;MACAL,WAAW,GAAGrB,OAAO,CAACyB,UAAR,CAAmBE,MAAjC;IACH,CAHD,MAIK;MACD,IAAIC,YAAY,GAAG5B,OAAO,CAAC6B,WAAR,CAAoBH,KAAvC;MACA,IAAII,aAAa,GAAG9B,OAAO,CAAC6B,WAAR,CAAoBF,MAAxC;MACA,IAAII,UAAU,GAAGf,OAAO,CAACU,KAAR,GAAgBE,YAAjC;MACA,IAAII,WAAW,GAAGhB,OAAO,CAACW,MAAR,GAAiBG,aAAnC;MACA,IAAIG,KAAK,GAAG,KAAK,CAAjB;;MACA,QAAQjC,OAAO,CAACwB,OAAhB;QACI,KAAK,MAAL;UACIS,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASJ,UAAT,EAAqBC,WAArB,CAAR;UACAZ,UAAU,GAAGQ,YAAY,GAAGK,KAA5B;UACAZ,WAAW,GAAGS,aAAa,GAAGG,KAA9B;UACAjB,OAAO,CAACoB,CAAR,IAAaF,IAAI,CAACG,GAAL,CAASrB,OAAO,CAACU,KAAR,GAAgBN,UAAzB,IAAuC,CAApD;UACAJ,OAAO,CAACsB,CAAR,IAAaJ,IAAI,CAACG,GAAL,CAASrB,OAAO,CAACW,MAAR,GAAiBN,WAA1B,IAAyC,CAAtD;UACA;;QACJ,KAAK,OAAL;UACIU,UAAU,GAAGf,OAAO,CAACU,KAAR,GAAgBE,YAA7B;UACAI,WAAW,GAAGhB,OAAO,CAACW,MAAR,GAAiBG,aAA/B;UACAG,KAAK,GAAGC,IAAI,CAACK,GAAL,CAASR,UAAT,EAAqBC,WAArB,CAAR;UACAZ,UAAU,GAAGQ,YAAY,GAAGK,KAA5B;UACAZ,WAAW,GAAGS,aAAa,GAAGG,KAA9B;UACAX,WAAW,GAAGN,OAAO,CAACU,KAAR,GAAgBN,UAAhB,GAA6BQ,YAA3C;UACAL,YAAY,GAAGP,OAAO,CAACW,MAAR,GAAiBN,WAAjB,GAA+BS,aAA9C;UACA;;QACJ,KAAK,MAAL;UACIV,UAAU,GAAGQ,YAAb;UACAP,WAAW,GAAGS,aAAd;UACA;MApBR;IAsBH;;IACDd,OAAO,CAACU,KAAR,GAAgBN,UAAhB;IACAJ,OAAO,CAACW,MAAR,GAAiBN,WAAjB,CA3CyG,CA4CzG;IACA;IACA;;IACAL,OAAO,CAACM,WAAR,GAAsBA,WAAtB;IACAN,OAAO,CAACO,YAAR,GAAuBA,YAAvB;IACAP,OAAO,CAACwB,MAAR,GAAiBxC,OAAO,CAACwC,MAAzB;IACAxB,OAAO,CAACyB,SAAR,GAAoBzC,OAAO,CAAC0C,UAA5B;IACA1B,OAAO,CAAC2B,KAAR,GAAgB3C,OAAO,CAAC4C,UAAxB;IACA,KAAK9C,QAAL,CAAc+C,SAAd,CAAwB1C,MAAxB,EAAgCa,OAAhC,EAAyCV,SAAzC,EAAoDE,WAApD;EACH,CArDD;EAsDA;;;EACAb,eAAe,CAACM,SAAhB,CAA0BY,iBAA1B,GAA8C,UAAUb,OAAV,EAAmBG,MAAnB,EAA2BE,SAA3B,EAAsCC,SAAtC,EAAiDE,WAAjD,EAA8D;IACxG,IAAIQ,OAAO,GAAG,KAAKC,iBAAL,CAAuBjB,OAAvB,EAAgCK,SAAhC,CAAd;IACAW,OAAO,CAAC8B,IAAR,GAAe9C,OAAO,CAAC+C,YAAvB;IACA/B,OAAO,CAAC8B,IAAR,GAAe9C,OAAO,CAAC+C,YAAvB;IACA,IAAIC,SAAS,GAAGhD,OAAO,CAACiD,EAAxB;;IACA,IAAI,CAAC,KAAKpD,SAAV,EAAqB;MACjBmB,OAAO,CAACoB,CAAR,GAAYpB,OAAO,CAACoB,CAApB;MACApB,OAAO,CAACsB,CAAR,GAAYtB,OAAO,CAACsB,CAApB;IACH;;IACD,KAAKxC,QAAL,CAAcoD,QAAd,CAAuB/C,MAAvB,EAA+Ba,OAA/B;EACH,CAVD;EAWA;;;EACArB,eAAe,CAACM,SAAhB,CAA0Ba,iBAA1B,GAA8C,UAAUd,OAAV,EAAmBG,MAAnB,EAA2BE,SAA3B,EAAsCC,SAAtC,EAAiDE,WAAjD,EAA8D;IACxG,IAAIQ,OAAO,GAAG,KAAKC,iBAAL,CAAuBjB,OAAvB,EAAgCK,SAAhC,CAAd;IACAW,OAAO,CAACE,YAAR,GAAuB,CAAvB;IACAF,OAAO,CAACmC,UAAR,GAAqB7D,kBAAkB,CAACU,OAAO,CAACoD,KAAR,CAAcD,UAAf,EAA2BnD,OAAO,CAACoD,KAAR,CAAcC,YAAzC,CAAvC;IACArC,OAAO,CAACsC,OAAR,GAAkBtD,OAAO,CAACsD,OAA1B;IACAtC,OAAO,CAACuC,SAAR,GAAoBlE,iBAAiB,CAACW,OAAO,CAACoD,KAAR,CAAcC,YAAf,CAArC;IACArC,OAAO,CAACwC,SAAR,GAAoBjE,iBAAiB,CAACS,OAAO,CAACoD,KAAR,CAAcI,SAAf,CAArC;IACAxC,OAAO,CAACyC,KAAR,GAAgBzD,OAAO,CAACoD,KAAR,CAAcK,KAA9B;IACAzC,OAAO,CAAC0C,MAAR,GAAiB1D,OAAO,CAACoD,KAAR,CAAcM,MAA/B;IACA1C,OAAO,CAAC2C,IAAR,GAAe3D,OAAO,CAACoD,KAAR,CAAcO,IAA7B;IACA3C,OAAO,CAAC4C,QAAR,GAAmB5D,OAAO,CAACoD,KAAR,CAAcQ,QAAjC;IACA5C,OAAO,CAAC6C,UAAR,GAAqB7D,OAAO,CAACoD,KAAR,CAAcS,UAAnC;IACA7C,OAAO,CAAC8C,YAAR,GAAuB9D,OAAO,CAACoD,KAAR,CAAcU,YAArC;IACA9C,OAAO,CAAC+C,cAAR,GAAyB/D,OAAO,CAACoD,KAAR,CAAcW,cAAvC;IACA/C,OAAO,CAACgD,MAAR,GAAiBhE,OAAO,CAACgE,MAAzB;IACAhD,OAAO,CAACiD,UAAR,GAAqBjE,OAAO,CAACiE,UAA7B;IACAjD,OAAO,CAACkD,UAAR,GAAqBlE,OAAO,CAACkE,UAA7B;IACAlD,OAAO,CAACmD,SAAR,GAAoB,EAApB;IACAnD,OAAO,CAACoD,WAAR,GAAsB,CAAtB;IACApD,OAAO,CAACqD,IAAR,GAAerE,OAAO,CAACoD,KAAR,CAAciB,IAA7B;IACA,IAAIrB,SAAS,GAAGhD,OAAO,CAACsD,OAAR,GAAkBtD,OAAO,CAACsD,OAA1B,GAAoCtD,OAAO,CAACiD,EAA5D;IACA,KAAKnD,QAAL,CAAcqB,aAAd,CAA4BhB,MAA5B,EAAoCa,OAApC;IACA,KAAKlB,QAAL,CAAcwE,QAAd,CAAuBnE,MAAvB,EAA+Ba,OAA/B;EACH,CAvBD;EAwBA;;;EACArB,eAAe,CAACM,SAAhB,CAA0BU,eAA1B,GAA4C,UAAU4D,KAAV,EAAiBpE,MAAjB,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+CC,SAA/C,EAA0DC,YAA1D,EAAwEC,WAAxE,EAAqFC,UAArF,EAAiG;IACzIJ,SAAS,GAAG;MAAEmE,EAAE,EAAE,CAAN;MAASC,EAAE,EAAE,CAAb;MAAgB9B,KAAK,EAAE;IAAvB,CAAZ;IACA,IAAI+B,SAAS,GAAG;MAAEC,GAAG,EAAErE,SAAP;MAAkBsE,CAAC,EAAEzE;IAArB,CAAhB;;IACA,IAAI,KAAKJ,SAAT,EAAoB;MAChBO,SAAS,GAAGA,SAAZ;IACH;;IACD,KAAKS,UAAL,CAAgBwD,KAAhB,EAAuBpE,MAAvB,EAA+BE,SAA/B,EAA0CC,SAA1C;;IACA,IAAIiE,KAAK,CAACM,WAAN,EAAJ,EAAyB;MACrB,IAAIC,OAAO,GAAG,KAAK,CAAnB;MACA,IAAIC,WAAJ;;MACA,KAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGV,KAAK,CAACW,QAA5B,EAAsCF,EAAE,GAAGC,EAAE,CAACE,MAA9C,EAAsDH,EAAE,EAAxD,EAA4D;QACxD,IAAII,KAAK,GAAGH,EAAE,CAACD,EAAD,CAAd;QACA,KAAK9E,aAAL,CAAmBkF,KAAnB,EAA0BN,OAAO,IAAI3E,MAArC,EAA6CC,SAA7C,EAAwDC,SAAxD,EAAmEC,SAAnE,EAA8E,IAA9E,EAAoFE,WAApF,EAAiGC,UAAjG;MACH;IACJ;EACJ,CAfD;EAgBA;;;EACAd,eAAe,CAACM,SAAhB,CAA0Bc,UAA1B,GAAuC,UAAUf,OAAV,EAAmBG,MAAnB,EAA2BE,SAA3B,EAAsCC,SAAtC,EAAiD;IACpF,IAAIU,OAAO,GAAG,KAAKC,iBAAL,CAAuBjB,OAAvB,EAAgCK,SAAhC,CAAd;IACAW,OAAO,CAACE,YAAR,GAAuBlB,OAAO,CAACkB,YAAR,IAAwB,CAA/C;IACA,IAAI8B,SAAS,GAAGhD,OAAO,CAACiD,EAAxB;IACA,KAAKnD,QAAL,CAAcqB,aAAd,CAA4BhB,MAA5B,EAAoCa,OAApC;EACH,CALD;EAMA;;;EACArB,eAAe,CAACM,SAAhB,CAA0BgB,iBAA1B,GAA8C,UAAUjB,OAAV,EAAmBK,SAAnB,EAA8B;IACxE,IAAIW,OAAO,GAAG;MACVU,KAAK,EAAE1B,OAAO,CAACyB,UAAR,CAAmBC,KADhB;MACuBC,MAAM,EAAE3B,OAAO,CAACyB,UAAR,CAAmBE,MADlD;MAEVS,CAAC,EAAEpC,OAAO,CAACqF,OAAR,GAAkBrF,OAAO,CAACyB,UAAR,CAAmBC,KAAnB,GAA2B1B,OAAO,CAACsF,KAAR,CAAclD,CAA3D,GAA+D,GAFxD;MAGVE,CAAC,EAAEtC,OAAO,CAACuF,OAAR,GAAkBvF,OAAO,CAACyB,UAAR,CAAmBE,MAAnB,GAA4B3B,OAAO,CAACsF,KAAR,CAAchD,CAA5D,GAAgE,GAHzD;MAIV+B,IAAI,EAAErE,OAAO,CAACoD,KAAR,CAAciB,IAJV;MAIgBmB,MAAM,EAAExF,OAAO,CAACoD,KAAR,CAAcqC,WAJtC;MAImDC,KAAK,EAAE1F,OAAO,CAAC2F,WAAR,GAAsB3F,OAAO,CAAC4F,eAJxF;MAKVC,MAAM,EAAE7F,OAAO,CAACsF,KAAR,CAAclD,CALZ;MAKe0D,MAAM,EAAE9F,OAAO,CAACsF,KAAR,CAAchD,CALrC;MAKwC8B,WAAW,EAAEpE,OAAO,CAACoD,KAAR,CAAcgB,WALnE;MAMVD,SAAS,EAAEnE,OAAO,CAACoD,KAAR,CAAc2C,eAAd,IAAiC,EANlC;MAMsCC,OAAO,EAAEhG,OAAO,CAACoD,KAAR,CAAc4C,OAN7D;MAOVC,OAAO,EAAEjG,OAAO,CAACiG,OAPP;MAOgBhD,EAAE,EAAEjD,OAAO,CAACiD,EAP5B;MAOgCiD,QAAQ,EAAElG,OAAO,CAACoD,KAAR,CAAc8C;IAPxD,CAAd;;IASA,IAAI7F,SAAJ,EAAe;MACXW,OAAO,CAACoB,CAAR,IAAa/B,SAAS,CAACmE,EAAvB;MACAxD,OAAO,CAACsB,CAAR,IAAajC,SAAS,CAACoE,EAAvB;IACH;;IACD,OAAOzD,OAAP;EACH,CAfD;;EAgBA,OAAOrB,eAAP;AACH,CA3KoC,EAArC;;AA4KA,SAASA,eAAT"},"metadata":{},"sourceType":"module"}