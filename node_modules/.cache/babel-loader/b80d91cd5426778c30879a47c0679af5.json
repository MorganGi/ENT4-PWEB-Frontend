{"ast":null,"code":"var _jsxFileName = \"/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/src/components2/search/Search.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  const path = require(\"./readPdf.pdf\");\n\n  const pdf_extract = require(\"./main.js\");\n\n  console.log(\"Usage: node thisfile.js the/path/tothe.pdf\");\n  const absolute_path_to_pdf = path.resolve(process.argv[2]);\n  if (absolute_path_to_pdf.includes(\" \")) throw new Error(\"will fail for paths w spaces like \" + absolute_path_to_pdf);\n  const options = {\n    type: \"text\",\n    // extract searchable text from PDF\n    ocr_flags: [\"--psm 1\"],\n    // automatically detect page orientation\n    enc: \"UTF-8\",\n    // optional, encoding to use for the text output\n    mode: \"layout\" // optional, mode to use when reading the pdf\n\n  };\n  const processor = pdf_extract(absolute_path_to_pdf, options, () => console.log(\"Starting…\"));\n  processor.on(\"complete\", data => callback(null, data));\n  processor.on(\"error\", callback);\n\n  function callback(error, data) {\n    error ? console.error(error) : console.log(data.text_pages[0]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Search\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n}\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","Search","path","require","pdf_extract","console","log","absolute_path_to_pdf","resolve","process","argv","includes","Error","options","type","ocr_flags","enc","mode","processor","on","data","callback","error","text_pages"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/src/components2/search/Search.js"],"sourcesContent":["import React from \"react\";\n\nfunction Search() {\n  const path = require(\"./readPdf.pdf\");\n  const pdf_extract = require(\"./main.js\");\n\n  console.log(\"Usage: node thisfile.js the/path/tothe.pdf\");\n  const absolute_path_to_pdf = path.resolve(process.argv[2]);\n  if (absolute_path_to_pdf.includes(\" \"))\n    throw new Error(\n      \"will fail for paths w spaces like \" + absolute_path_to_pdf\n    );\n\n  const options = {\n    type: \"text\", // extract searchable text from PDF\n    ocr_flags: [\"--psm 1\"], // automatically detect page orientation\n    enc: \"UTF-8\", // optional, encoding to use for the text output\n    mode: \"layout\", // optional, mode to use when reading the pdf\n  };\n  const processor = pdf_extract(absolute_path_to_pdf, options, () =>\n    console.log(\"Starting…\")\n  );\n  processor.on(\"complete\", (data) => callback(null, data));\n  processor.on(\"error\", callback);\n  function callback(error, data) {\n    error ? console.error(error) : console.log(data.text_pages[0]);\n  }\n\n  return <div>Search</div>;\n}\n\nexport default Search;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,MAAT,GAAkB;EAChB,MAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;EACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAA3B;;EAEAE,OAAO,CAACC,GAAR,CAAY,4CAAZ;EACA,MAAMC,oBAAoB,GAAGL,IAAI,CAACM,OAAL,CAAaC,OAAO,CAACC,IAAR,CAAa,CAAb,CAAb,CAA7B;EACA,IAAIH,oBAAoB,CAACI,QAArB,CAA8B,GAA9B,CAAJ,EACE,MAAM,IAAIC,KAAJ,CACJ,uCAAuCL,oBADnC,CAAN;EAIF,MAAMM,OAAO,GAAG;IACdC,IAAI,EAAE,MADQ;IACA;IACdC,SAAS,EAAE,CAAC,SAAD,CAFG;IAEU;IACxBC,GAAG,EAAE,OAHS;IAGA;IACdC,IAAI,EAAE,QAJQ,CAIE;;EAJF,CAAhB;EAMA,MAAMC,SAAS,GAAGd,WAAW,CAACG,oBAAD,EAAuBM,OAAvB,EAAgC,MAC3DR,OAAO,CAACC,GAAR,CAAY,WAAZ,CAD2B,CAA7B;EAGAY,SAAS,CAACC,EAAV,CAAa,UAAb,EAA0BC,IAAD,IAAUC,QAAQ,CAAC,IAAD,EAAOD,IAAP,CAA3C;EACAF,SAAS,CAACC,EAAV,CAAa,OAAb,EAAsBE,QAAtB;;EACA,SAASA,QAAT,CAAkBC,KAAlB,EAAyBF,IAAzB,EAA+B;IAC7BE,KAAK,GAAGjB,OAAO,CAACiB,KAAR,CAAcA,KAAd,CAAH,GAA0BjB,OAAO,CAACC,GAAR,CAAYc,IAAI,CAACG,UAAL,CAAgB,CAAhB,CAAZ,CAA/B;EACD;;EAED,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;KA3BQtB,M;AA6BT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}