{"ast":null,"code":"import { isNullOrUndefined as isNOU, Internationalization, isBlazor } from '@syncfusion/ej2-base';\n/**\n * Exports util methods used by In-place editor.\n */\n\nvar intl = new Internationalization();\n/**\n * @param {string} type - specifies the string type\n * @param {valueType} val - specifies the value type\n * @param {modelType} model - specifies the model type\n * @returns {string} - returns the string\n */\n\nexport function parseValue(type, val, model) {\n  if (isNOU(val) || val === '') {\n    return '';\n  }\n\n  var result;\n  var tempFormat;\n\n  switch (type) {\n    case 'Color':\n      {\n        var hex = val;\n        result = hex.length > 7 ? hex.slice(0, -2) : hex;\n        break;\n      }\n\n    case 'Date':\n      tempFormat = model.format;\n      result = intl.formatDate(val, {\n        format: tempFormat,\n        type: type,\n        skeleton: isBlazor() ? 'd' : 'yMd'\n      });\n      break;\n\n    case 'DateRange':\n      {\n        tempFormat = model.format;\n        var date = val;\n        result = intl.formatDate(date[0], {\n          format: tempFormat,\n          type: type,\n          skeleton: isBlazor() ? 'd' : 'yMd'\n        }) + ' - ' + intl.formatDate(date[1], {\n          format: tempFormat,\n          type: type,\n          skeleton: isBlazor() ? 'd' : 'yMd'\n        });\n        break;\n      }\n\n    case 'DateTime':\n      tempFormat = model.format;\n\n      if (isNOU(tempFormat) || tempFormat === '') {\n        result = intl.formatDate(val, {\n          format: tempFormat,\n          type: type,\n          skeleton: isBlazor() ? 'd' : 'yMd'\n        }) + ' ' + intl.formatDate(val, {\n          format: tempFormat,\n          type: type,\n          skeleton: isBlazor() ? 't' : 'hm'\n        });\n      } else {\n        result = intl.formatDate(val, {\n          format: tempFormat,\n          type: type,\n          skeleton: isBlazor() ? 'd' : 'yMd'\n        });\n      }\n\n      break;\n\n    case 'Time':\n      tempFormat = model.format;\n      result = intl.formatDate(val, {\n        format: tempFormat,\n        type: type,\n        skeleton: isBlazor() ? 't' : 'hm'\n      });\n      break;\n\n    case 'Numeric':\n      {\n        tempFormat = isNOU(model.format) ? 'n2' : model.format;\n        var tempVal = isNOU(val) ? null : typeof val === 'number' ? val : intl.parseNumber(val);\n        result = intl.formatNumber(tempVal, {\n          format: tempFormat\n        });\n        break;\n      }\n\n    default:\n      result = val.toString();\n      break;\n  }\n\n  return result;\n}\n/**\n *\n * @param {string} type - specifies the string value\n * @param {valueType} val - specifies the value type\n * @returns {valueType} - returns the value type\n */\n\nexport function getCompValue(type, val) {\n  if (isNOU(val) || val === '') {\n    return val;\n  }\n\n  if ((type === 'Date' || type === 'Time' || type === 'DateTime') && typeof val === 'string') {\n    val = new Date(val);\n  } else if (type === 'DateRange') {\n    if (typeof val === 'object' && typeof val[0] === 'string') {\n      val = [new Date(val[0]), new Date(val[1])];\n    } else if (typeof val === 'string') {\n      var temp = val.split('-');\n      val = [new Date(temp[0]), new Date(temp[1])];\n    }\n  }\n\n  return val;\n}\n/**\n * @param {string} value - specifies the string value\n * @returns {string} - returns the string\n * @hidden\n */\n\nexport function encode(value) {\n  var data = [];\n\n  for (var i = value.length - 1; i >= 0; i--) {\n    data.unshift([\"&#\", value[i].charCodeAt(0), \";\"].join(\"\"));\n  }\n\n  return data.join(\"\");\n}","map":{"version":3,"names":["isNullOrUndefined","isNOU","Internationalization","isBlazor","intl","parseValue","type","val","model","result","tempFormat","hex","length","slice","format","formatDate","skeleton","date","tempVal","parseNumber","formatNumber","toString","getCompValue","Date","temp","split","encode","value","data","i","unshift","charCodeAt","join"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-inplace-editor/src/inplace-editor/base/util.js"],"sourcesContent":["import { isNullOrUndefined as isNOU, Internationalization, isBlazor } from '@syncfusion/ej2-base';\n/**\n * Exports util methods used by In-place editor.\n */\nvar intl = new Internationalization();\n/**\n * @param {string} type - specifies the string type\n * @param {valueType} val - specifies the value type\n * @param {modelType} model - specifies the model type\n * @returns {string} - returns the string\n */\nexport function parseValue(type, val, model) {\n    if (isNOU(val) || val === '') {\n        return '';\n    }\n    var result;\n    var tempFormat;\n    switch (type) {\n        case 'Color': {\n            var hex = val;\n            result = (hex.length > 7) ? hex.slice(0, -2) : hex;\n            break;\n        }\n        case 'Date':\n            tempFormat = model.format;\n            result = intl.formatDate(val, { format: tempFormat, type: type, skeleton: isBlazor() ? 'd' : 'yMd' });\n            break;\n        case 'DateRange': {\n            tempFormat = model.format;\n            var date = val;\n            result = intl.formatDate(date[0], { format: tempFormat, type: type, skeleton: isBlazor() ? 'd' : 'yMd' }) + ' - '\n                + intl.formatDate(date[1], { format: tempFormat, type: type, skeleton: isBlazor() ? 'd' : 'yMd' });\n            break;\n        }\n        case 'DateTime':\n            tempFormat = model.format;\n            if (isNOU(tempFormat) || tempFormat === '') {\n                result = intl.formatDate(val, { format: tempFormat, type: type, skeleton: isBlazor() ? 'd' : 'yMd' }) + ' '\n                    + intl.formatDate(val, { format: tempFormat, type: type, skeleton: isBlazor() ? 't' : 'hm' });\n            }\n            else {\n                result = intl.formatDate(val, { format: tempFormat, type: type, skeleton: isBlazor() ? 'd' : 'yMd' });\n            }\n            break;\n        case 'Time':\n            tempFormat = model.format;\n            result = intl.formatDate(val, { format: tempFormat, type: type, skeleton: isBlazor() ? 't' : 'hm' });\n            break;\n        case 'Numeric': {\n            tempFormat = isNOU(model.format) ? 'n2' :\n                model.format;\n            var tempVal = isNOU(val) ? null : (typeof (val) === 'number' ? val : intl.parseNumber(val));\n            result = intl.formatNumber(tempVal, { format: tempFormat });\n            break;\n        }\n        default:\n            result = val.toString();\n            break;\n    }\n    return result;\n}\n/**\n *\n * @param {string} type - specifies the string value\n * @param {valueType} val - specifies the value type\n * @returns {valueType} - returns the value type\n */\nexport function getCompValue(type, val) {\n    if (isNOU(val) || val === '') {\n        return val;\n    }\n    if ((type === 'Date' || type === 'Time' || type === 'DateTime') && typeof (val) === 'string') {\n        val = new Date(val);\n    }\n    else if (type === 'DateRange') {\n        if (typeof (val) === 'object' && typeof (val[0]) === 'string') {\n            val = [new Date(val[0]), new Date(val[1])];\n        }\n        else if (typeof (val) === 'string') {\n            var temp = val.split('-');\n            val = [new Date(temp[0]), new Date(temp[1])];\n        }\n    }\n    return val;\n}\n/**\n * @param {string} value - specifies the string value\n * @returns {string} - returns the string\n * @hidden\n */\nexport function encode(value) {\n    var data = [];\n    for (var i = value.length - 1; i >= 0; i--) {\n        data.unshift([\"&#\", value[i].charCodeAt(0), \";\"].join(\"\"));\n    }\n    return data.join(\"\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}