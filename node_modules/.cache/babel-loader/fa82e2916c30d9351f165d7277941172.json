{"ast":null,"code":"import { RotateTransform, ElementAction } from '../../enum/enum';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { getBounds } from '../../utility/base-util';\n/**\n * DiagramElement module defines the basic unit of diagram\n */\n\nvar DrawingElement =\n/** @class */\nfunction () {\n  function DrawingElement() {\n    /**\n     * Sets/Gets the reference point of the element\n     * ```html\n     * <div id='diagram'></div>\n     * ```\n     * ```typescript\n     * let stackPanel: StackPanel = new StackPanel();\n     * stackPanel.offsetX = 300; stackPanel.offsetY = 200;\n     * stackPanel.width = 100; stackPanel.height = 100;\n     * stackPanel.style.fill = 'red';\n     * stackPanel.pivot = { x: 0.5, y: 0.5 };\n     * let diagram: Diagram = new Diagram({\n     * ...\n     * basicElements: [stackPanel],\n     * ...\n     * });\n     * diagram.appendTo('#diagram');\n     * ```\n     */\n    this.pivot = {\n      x: 0.5,\n      y: 0.5\n    };\n    this.rotateValue = {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n    /**\n     * Sets or gets whether the content of the element needs to be measured\n     */\n\n    this.isDirt = true;\n    /**\n     * Sets/Gets the x-coordinate of the element\n     */\n\n    this.offsetX = 0;\n    /**\n     * Sets/Gets the y-coordinate of the element\n     */\n\n    this.offsetY = 0;\n    /**\n     * Set the corner of the element\n     */\n\n    this.cornerRadius = 0;\n    /**\n     * Sets/Gets the minimum height of the element\n     */\n\n    this.minHeight = undefined;\n    /**\n     * Sets/Gets the minimum width of the element\n     */\n\n    this.minWidth = undefined;\n    /**\n     * Sets/Gets the maximum width of the element\n     */\n\n    this.maxWidth = undefined;\n    /**\n     * Sets/Gets the maximum height of the element\n     */\n\n    this.maxHeight = undefined;\n    /**\n     * Sets/Gets the width of the element\n     */\n\n    this.width = undefined;\n    /**\n     * Sets/Gets the height of the element\n     */\n\n    this.height = undefined;\n    /**\n     * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent\n     * * Stretch - Stretches the diagram element throughout its immediate parent\n     * * Left - Aligns the diagram element at the left of its immediate parent\n     * * Right - Aligns the diagram element at the right of its immediate parent\n     * * Center - Aligns the diagram element at the center of its immediate parent\n     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n     */\n\n    this.horizontalAlignment = 'Auto';\n    /**\n     * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent\n     * * Stretch - Stretches the diagram element throughout its immediate parent\n     * * Top - Aligns the diagram element at the top of its immediate parent\n     * * Bottom - Aligns the diagram element at the bottom of its immediate parent\n     * * Center - Aligns the diagram element at the center of its immediate parent\n     * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n     */\n\n    this.verticalAlignment = 'Auto';\n    /**\n     * Sets or gets whether the content of the element to be visible\n     */\n\n    this.visible = true;\n    /**\n     * Sets/Gets the rotate angle of the element\n     */\n\n    this.rotateAngle = 0;\n    /**\n     * Sets/Gets the margin of the element\n     */\n\n    this.margin = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /**\n     * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent\n     * * Point - Diagram elements will be aligned with respect to a point\n     * * Object - Diagram elements will be aligned with respect to its immediate parent\n     */\n\n    this.relativeMode = 'Point';\n    /**\n     * Sets whether the element has to be transformed based on its parent or not\n     * * Self - Sets the transform type as Self\n     * * Parent - Sets the transform type as Parent\n     */\n\n    /** @private */\n\n    this.transform = RotateTransform.Self | RotateTransform.Parent;\n    /**\n     * Sets the style of the element\n     */\n\n    this.style = {\n      fill: 'white',\n      strokeColor: 'black',\n      opacity: 1,\n      strokeWidth: 1\n    };\n    /**\n     * Gets the minimum size that is required by the element\n     */\n\n    this.desiredSize = new Size();\n    /**\n     * Gets the size that the element will be rendered\n     */\n\n    this.actualSize = new Size();\n    /**\n     * Gets the rotate angle that is set to the immediate parent of the element\n     */\n\n    this.parentTransform = 0;\n    /** @private */\n\n    this.preventContainer = false;\n    /**\n     * Gets/Sets the boundary of the element\n     */\n\n    this.bounds = new Rect(0, 0, 0, 0);\n    /**\n     * Defines whether the element has to be measured or not\n     */\n\n    this.staticSize = false;\n    /**\n     * check whether the element is rect or not\n     */\n\n    /** @private */\n\n    this.isRectElement = false;\n    /** @private */\n\n    this.isCalculateDesiredSize = true;\n    /**\n     * Defines whether the element is group or port\n     */\n\n    /** @private */\n\n    this.elementActions = ElementAction.None; //private variables\n\n    this.position = undefined;\n    this.unitMode = undefined;\n    /**   @private  */\n\n    this.float = false;\n    this.floatingBounds = undefined;\n  } // public constructor() {\n  //     this.id = randomId();\n  // }\n\n  /**\n   * Sets the offset of the element with respect to its parent\n   * @param x\n   * @param y\n   * @param mode\n   */\n\n\n  DrawingElement.prototype.setOffsetWithRespectToBounds = function (x, y, mode) {\n    this.unitMode = mode;\n    this.position = {\n      x: x,\n      y: y\n    };\n  };\n  /**\n   * Gets the position of the element with respect to its parent\n   * @param size\n   */\n\n\n  DrawingElement.prototype.getAbsolutePosition = function (size) {\n    if (this.position !== undefined) {\n      if (this.unitMode === 'Absolute') {\n        return this.position;\n      } else {\n        return {\n          x: this.position.x * size.width,\n          y: this.position.y * size.height\n        };\n      }\n    }\n\n    return undefined;\n  };\n\n  Object.defineProperty(DrawingElement.prototype, \"outerBounds\", {\n    get: function () {\n      return this.floatingBounds || this.bounds;\n    },\n\n    /**\n     * used to set the outer bounds value\n     * @private\n     */\n    set: function (bounds) {\n      this.floatingBounds = bounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Measures the minimum space that the element requires\n   * @param availableSize\n   */\n\n  DrawingElement.prototype.measure = function (availableSize) {\n    var width = this.width !== undefined ? this.width : (availableSize.width || 0) - this.margin.left - this.margin.right;\n    var height = this.height !== undefined ? this.height : (availableSize.height || 0) - this.margin.top - this.margin.bottom;\n    this.desiredSize = new Size(width, height);\n\n    if (this.isCalculateDesiredSize) {\n      this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n    }\n\n    return this.desiredSize;\n  };\n  /**\n   * Arranges the element\n   * @param desiredSize\n   */\n\n\n  DrawingElement.prototype.arrange = function (desiredSize) {\n    this.actualSize = desiredSize;\n    this.updateBounds();\n    return this.actualSize;\n  };\n  /**\n   * Updates the bounds of the element\n   */\n\n\n  DrawingElement.prototype.updateBounds = function () {\n    this.bounds = getBounds(this);\n  };\n  /**\n   * Validates the size of the element with respect to its minimum and maximum size\n   * @param desiredSize\n   * @param availableSize\n   */\n\n\n  DrawingElement.prototype.validateDesiredSize = function (desiredSize, availableSize) {\n    //Empty canvas\n    if (this.isRectElement && !this.width && !this.minWidth && !this.maxWidth) {\n      desiredSize.width = 50;\n    }\n\n    if (this.isRectElement && !this.height && !this.minHeight && !this.maxHeight) {\n      desiredSize.height = 50;\n    }\n\n    if (desiredSize === undefined || this.width !== undefined && this.height !== undefined) {\n      desiredSize = desiredSize || new Size();\n      desiredSize.width = this.width === undefined ? (availableSize.width || 0) - this.margin.left - this.margin.right : this.width;\n      desiredSize.height = this.height === undefined ? (availableSize.height || 0) - this.margin.top - this.margin.bottom : this.height;\n    } //Considering min values\n\n\n    if (this.minWidth !== undefined) {\n      desiredSize.width = Math.max(desiredSize.width, this.minWidth);\n    }\n\n    if (this.minHeight !== undefined) {\n      desiredSize.height = Math.max(desiredSize.height, this.minHeight);\n    } //Considering max values\n\n\n    if (this.maxWidth !== undefined) {\n      desiredSize.width = Math.min(desiredSize.width, this.maxWidth);\n    }\n\n    if (this.maxHeight !== undefined) {\n      desiredSize.height = Math.min(desiredSize.height, this.maxHeight);\n    }\n\n    return desiredSize;\n  };\n\n  return DrawingElement;\n}();\n\nexport { DrawingElement };","map":{"version":3,"names":["RotateTransform","ElementAction","Size","Rect","getBounds","DrawingElement","pivot","x","y","rotateValue","angle","isDirt","offsetX","offsetY","cornerRadius","minHeight","undefined","minWidth","maxWidth","maxHeight","width","height","horizontalAlignment","verticalAlignment","visible","rotateAngle","margin","left","right","top","bottom","relativeMode","transform","Self","Parent","style","fill","strokeColor","opacity","strokeWidth","desiredSize","actualSize","parentTransform","preventContainer","bounds","staticSize","isRectElement","isCalculateDesiredSize","elementActions","None","position","unitMode","float","floatingBounds","prototype","setOffsetWithRespectToBounds","mode","getAbsolutePosition","size","Object","defineProperty","get","set","enumerable","configurable","measure","availableSize","validateDesiredSize","arrange","updateBounds","Math","max","min"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/@syncfusion/ej2-drawings/src/drawing/core/elements/drawing-element.js"],"sourcesContent":["import { RotateTransform, ElementAction } from '../../enum/enum';\nimport { Size } from '../../primitives/size';\nimport { Rect } from '../../primitives/rect';\nimport { getBounds } from '../../utility/base-util';\n/**\n * DiagramElement module defines the basic unit of diagram\n */\nvar DrawingElement = /** @class */ (function () {\n    function DrawingElement() {\n        /**\n         * Sets/Gets the reference point of the element\n         * ```html\n         * <div id='diagram'></div>\n         * ```\n         * ```typescript\n         * let stackPanel: StackPanel = new StackPanel();\n         * stackPanel.offsetX = 300; stackPanel.offsetY = 200;\n         * stackPanel.width = 100; stackPanel.height = 100;\n         * stackPanel.style.fill = 'red';\n         * stackPanel.pivot = { x: 0.5, y: 0.5 };\n         * let diagram: Diagram = new Diagram({\n         * ...\n         * basicElements: [stackPanel],\n         * ...\n         * });\n         * diagram.appendTo('#diagram');\n         * ```\n         */\n        this.pivot = { x: 0.5, y: 0.5 };\n        this.rotateValue = { x: 0, y: 0, angle: 0 };\n        /**\n         * Sets or gets whether the content of the element needs to be measured\n         */\n        this.isDirt = true;\n        /**\n         * Sets/Gets the x-coordinate of the element\n         */\n        this.offsetX = 0;\n        /**\n         * Sets/Gets the y-coordinate of the element\n         */\n        this.offsetY = 0;\n        /**\n         * Set the corner of the element\n         */\n        this.cornerRadius = 0;\n        /**\n         * Sets/Gets the minimum height of the element\n         */\n        this.minHeight = undefined;\n        /**\n         * Sets/Gets the minimum width of the element\n         */\n        this.minWidth = undefined;\n        /**\n         * Sets/Gets the maximum width of the element\n         */\n        this.maxWidth = undefined;\n        /**\n         * Sets/Gets the maximum height of the element\n         */\n        this.maxHeight = undefined;\n        /**\n         * Sets/Gets the width of the element\n         */\n        this.width = undefined;\n        /**\n         * Sets/Gets the height of the element\n         */\n        this.height = undefined;\n        /**\n         * Sets/Gets how the element has to be horizontally arranged with respect to its immediate parent\n         * * Stretch - Stretches the diagram element throughout its immediate parent\n         * * Left - Aligns the diagram element at the left of its immediate parent\n         * * Right - Aligns the diagram element at the right of its immediate parent\n         * * Center - Aligns the diagram element at the center of its immediate parent\n         * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n         */\n        this.horizontalAlignment = 'Auto';\n        /**\n         * Sets/Gets how the element has to be vertically arranged with respect to its immediate parent\n         * * Stretch - Stretches the diagram element throughout its immediate parent\n         * * Top - Aligns the diagram element at the top of its immediate parent\n         * * Bottom - Aligns the diagram element at the bottom of its immediate parent\n         * * Center - Aligns the diagram element at the center of its immediate parent\n         * * Auto - Aligns the diagram element based on the characteristics of its immediate parent\n         */\n        this.verticalAlignment = 'Auto';\n        /**\n         * Sets or gets whether the content of the element to be visible\n         */\n        this.visible = true;\n        /**\n         * Sets/Gets the rotate angle of the element\n         */\n        this.rotateAngle = 0;\n        /**\n         * Sets/Gets the margin of the element\n         */\n        this.margin = { left: 0, right: 0, top: 0, bottom: 0 };\n        /**\n         * Sets whether the element has to be aligned with respect to a point/with respect to its immediate parent\n         * * Point - Diagram elements will be aligned with respect to a point\n         * * Object - Diagram elements will be aligned with respect to its immediate parent\n         */\n        this.relativeMode = 'Point';\n        /**\n         * Sets whether the element has to be transformed based on its parent or not\n         * * Self - Sets the transform type as Self\n         * * Parent - Sets the transform type as Parent\n         */\n        /** @private */\n        this.transform = RotateTransform.Self | RotateTransform.Parent;\n        /**\n         * Sets the style of the element\n         */\n        this.style = { fill: 'white', strokeColor: 'black', opacity: 1, strokeWidth: 1 };\n        /**\n         * Gets the minimum size that is required by the element\n         */\n        this.desiredSize = new Size();\n        /**\n         * Gets the size that the element will be rendered\n         */\n        this.actualSize = new Size();\n        /**\n         * Gets the rotate angle that is set to the immediate parent of the element\n         */\n        this.parentTransform = 0;\n        /** @private */\n        this.preventContainer = false;\n        /**\n         * Gets/Sets the boundary of the element\n         */\n        this.bounds = new Rect(0, 0, 0, 0);\n        /**\n         * Defines whether the element has to be measured or not\n         */\n        this.staticSize = false;\n        /**\n         * check whether the element is rect or not\n         */\n        /** @private */\n        this.isRectElement = false;\n        /** @private */\n        this.isCalculateDesiredSize = true;\n        /**\n         * Defines whether the element is group or port\n         */\n        /** @private */\n        this.elementActions = ElementAction.None;\n        //private variables\n        this.position = undefined;\n        this.unitMode = undefined;\n        /**   @private  */\n        this.float = false;\n        this.floatingBounds = undefined;\n    }\n    // public constructor() {\n    //     this.id = randomId();\n    // }\n    /**\n     * Sets the offset of the element with respect to its parent\n     * @param x\n     * @param y\n     * @param mode\n     */\n    DrawingElement.prototype.setOffsetWithRespectToBounds = function (x, y, mode) {\n        this.unitMode = mode;\n        this.position = { x: x, y: y };\n    };\n    /**\n     * Gets the position of the element with respect to its parent\n     * @param size\n     */\n    DrawingElement.prototype.getAbsolutePosition = function (size) {\n        if (this.position !== undefined) {\n            if (this.unitMode === 'Absolute') {\n                return this.position;\n            }\n            else {\n                return {\n                    x: this.position.x * size.width, y: this.position.y * size.height\n                };\n            }\n        }\n        return undefined;\n    };\n    Object.defineProperty(DrawingElement.prototype, \"outerBounds\", {\n        get: function () {\n            return this.floatingBounds || this.bounds;\n        },\n        /**\n         * used to set the outer bounds value\n         * @private\n         */\n        set: function (bounds) {\n            this.floatingBounds = bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Measures the minimum space that the element requires\n     * @param availableSize\n     */\n    DrawingElement.prototype.measure = function (availableSize) {\n        var width = this.width !== undefined ? this.width : (availableSize.width || 0) - this.margin.left - this.margin.right;\n        var height = this.height !== undefined ? this.height : (availableSize.height || 0) - this.margin.top - this.margin.bottom;\n        this.desiredSize = new Size(width, height);\n        if (this.isCalculateDesiredSize) {\n            this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);\n        }\n        return this.desiredSize;\n    };\n    /**\n     * Arranges the element\n     * @param desiredSize\n     */\n    DrawingElement.prototype.arrange = function (desiredSize) {\n        this.actualSize = desiredSize;\n        this.updateBounds();\n        return this.actualSize;\n    };\n    /**\n     * Updates the bounds of the element\n     */\n    DrawingElement.prototype.updateBounds = function () {\n        this.bounds = getBounds(this);\n    };\n    /**\n     * Validates the size of the element with respect to its minimum and maximum size\n     * @param desiredSize\n     * @param availableSize\n     */\n    DrawingElement.prototype.validateDesiredSize = function (desiredSize, availableSize) {\n        //Empty canvas\n        if (this.isRectElement && !this.width && !this.minWidth && !this.maxWidth) {\n            desiredSize.width = 50;\n        }\n        if (this.isRectElement && !this.height && !this.minHeight && !this.maxHeight) {\n            desiredSize.height = 50;\n        }\n        if (desiredSize === undefined || this.width !== undefined &&\n            this.height !== undefined) {\n            desiredSize = desiredSize || new Size();\n            desiredSize.width = this.width === undefined ? (availableSize.width || 0)\n                - this.margin.left - this.margin.right : this.width;\n            desiredSize.height = this.height === undefined ? (availableSize.height || 0)\n                - this.margin.top - this.margin.bottom : this.height;\n        }\n        //Considering min values\n        if (this.minWidth !== undefined) {\n            desiredSize.width = Math.max(desiredSize.width, this.minWidth);\n        }\n        if (this.minHeight !== undefined) {\n            desiredSize.height = Math.max(desiredSize.height, this.minHeight);\n        }\n        //Considering max values\n        if (this.maxWidth !== undefined) {\n            desiredSize.width = Math.min(desiredSize.width, this.maxWidth);\n        }\n        if (this.maxHeight !== undefined) {\n            desiredSize.height = Math.min(desiredSize.height, this.maxHeight);\n        }\n        return desiredSize;\n    };\n    return DrawingElement;\n}());\nexport { DrawingElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}