{"ast":null,"code":"/**\n * Converts a pdf file at a given path to a tiff file with\n * the GraphicsMagick command \"convert\"\n */\nvar temp = require('temp');\n\nvar path = require('path');\n\nvar exec = require('child_process').exec;\n\nvar spawn = require('child_process').spawn;\n\nvar fs = require('fs');\n\nvar pdf_convert_quality = 400; // default to density 400 for the convert command\n\n/**\n * @param input_path the path to a pdf file on disk. Since GhostScript requires random file access, we need a path\n *   to an actual file rather than accepting a stream\n * @param {String} quality is an optional flag that controls the quality of the pdf to tiff conversion.\n * @return {String} output_path the path to the converted tif file\n * @return callback(<maybe error>, output_path)\n */\n\nexports = module.exports = function convert(input_path, quality, callback) {\n  // options is an optional parameter\n  if (!callback || typeof callback != \"function\") {\n    callback = quality; // callback must be the second parameter\n\n    quality = undefined; // no option passed\n  }\n\n  fs.exists(input_path, function (exists) {\n    if (!exists) {\n      return callback('error, no file exists at the path you specified: ' + input_path);\n    } // get a temp output path\n\n\n    var output_path = temp.path({\n      prefix: 'tif_output',\n      suffix: '.tif'\n    }); // var output_path = path.join(__dirname,'test/test_data/single_page_raw.tif');\n\n    var params = [// '-depth 8',\n    // '-background white',\n    // '-flatten +matte',\n    // '-density '+pdf_convert_quality,\n    input_path, output_path];\n\n    if (quality) {\n      if (typeof quality !== 'string' && typeof quality !== 'number') {\n        return callback('error, pdf quality option must be a string, you passed a ' + typeof quality);\n      }\n\n      pdf_convert_quality = quality;\n    }\n\n    var cmd = 'gs -sDEVICE=tiffgray -r720x720 -g6120x7920 -sCompression=lzw -o \"' + output_path + '\" \"' + input_path + '\"'; // var cmd = 'convert -depth 8 -background white -flatten +matte -density '+pdf_convert_quality+' \"'+ input_path +'\"  \"' + output_path+'\"';\n\n    var child = exec(cmd, function (err, stderr, stdout) {\n      if (err) {\n        return callback(err);\n      }\n\n      return callback(null, output_path);\n    });\n  });\n};","map":{"version":3,"names":["temp","require","path","exec","spawn","fs","pdf_convert_quality","exports","module","convert","input_path","quality","callback","undefined","exists","output_path","prefix","suffix","params","cmd","child","err","stderr","stdout"],"sources":["/home/morgan/Desktop/Projets/ENT4/Jwt-Auth-pdf/react-jwt-auth/react-jwt-auth/node_modules/pdf-extract/lib/convert.js"],"sourcesContent":["/**\n * Converts a pdf file at a given path to a tiff file with\n * the GraphicsMagick command \"convert\"\n */\nvar temp = require('temp');\nvar path = require('path');\nvar exec = require('child_process').exec\nvar spawn = require('child_process').spawn;\nvar fs = require('fs');\nvar pdf_convert_quality = 400; // default to density 400 for the convert command\n\n\n/**\n * @param input_path the path to a pdf file on disk. Since GhostScript requires random file access, we need a path\n *   to an actual file rather than accepting a stream\n * @param {String} quality is an optional flag that controls the quality of the pdf to tiff conversion.\n * @return {String} output_path the path to the converted tif file\n * @return callback(<maybe error>, output_path)\n */\nexports = module.exports = function convert(input_path, quality, callback) {\n  // options is an optional parameter\n  if (!callback || typeof callback != \"function\") {\n    callback = quality;   // callback must be the second parameter\n    quality = undefined;  // no option passed\n  }\n\n  fs.exists(input_path, function (exists) {\n    if (!exists) { return callback('error, no file exists at the path you specified: ' + input_path); }\n    // get a temp output path\n\n    var output_path = temp.path({prefix: 'tif_output', suffix:'.tif'});\n    // var output_path = path.join(__dirname,'test/test_data/single_page_raw.tif');\n    var params = [\n\n      // '-depth 8',\n      // '-background white',\n      // '-flatten +matte',\n      // '-density '+pdf_convert_quality,\n      input_path,\n      output_path\n    ];\n    if (quality) {\n      if (typeof(quality) !== 'string' && typeof(quality) !== 'number') {\n        return callback('error, pdf quality option must be a string, you passed a ' + typeof(quality));\n      }\n      pdf_convert_quality = quality;\n    }\n    var cmd = 'gs -sDEVICE=tiffgray -r720x720 -g6120x7920 -sCompression=lzw -o \"' + output_path + '\" \"'+input_path+'\"';\n    // var cmd = 'convert -depth 8 -background white -flatten +matte -density '+pdf_convert_quality+' \"'+ input_path +'\"  \"' + output_path+'\"';\n    var child = exec(cmd, function (err, stderr, stdout) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, output_path);\n    });\n  });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,IAApC;;AACA,IAAIC,KAAK,GAAGH,OAAO,CAAC,eAAD,CAAP,CAAyBG,KAArC;;AACA,IAAIC,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIK,mBAAmB,GAAG,GAA1B,C,CAA+B;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB,SAASE,OAAT,CAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgD;EACzE;EACA,IAAI,CAACA,QAAD,IAAa,OAAOA,QAAP,IAAmB,UAApC,EAAgD;IAC9CA,QAAQ,GAAGD,OAAX,CAD8C,CACxB;;IACtBA,OAAO,GAAGE,SAAV,CAF8C,CAExB;EACvB;;EAEDR,EAAE,CAACS,MAAH,CAAUJ,UAAV,EAAsB,UAAUI,MAAV,EAAkB;IACtC,IAAI,CAACA,MAAL,EAAa;MAAE,OAAOF,QAAQ,CAAC,sDAAsDF,UAAvD,CAAf;IAAoF,CAD7D,CAEtC;;;IAEA,IAAIK,WAAW,GAAGf,IAAI,CAACE,IAAL,CAAU;MAACc,MAAM,EAAE,YAAT;MAAuBC,MAAM,EAAC;IAA9B,CAAV,CAAlB,CAJsC,CAKtC;;IACA,IAAIC,MAAM,GAAG,CAEX;IACA;IACA;IACA;IACAR,UANW,EAOXK,WAPW,CAAb;;IASA,IAAIJ,OAAJ,EAAa;MACX,IAAI,OAAOA,OAAP,KAAoB,QAApB,IAAgC,OAAOA,OAAP,KAAoB,QAAxD,EAAkE;QAChE,OAAOC,QAAQ,CAAC,8DAA8D,OAAOD,OAAtE,CAAf;MACD;;MACDL,mBAAmB,GAAGK,OAAtB;IACD;;IACD,IAAIQ,GAAG,GAAG,sEAAsEJ,WAAtE,GAAoF,KAApF,GAA0FL,UAA1F,GAAqG,GAA/G,CArBsC,CAsBtC;;IACA,IAAIU,KAAK,GAAGjB,IAAI,CAACgB,GAAD,EAAM,UAAUE,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;MACnD,IAAIF,GAAJ,EAAS;QACP,OAAOT,QAAQ,CAACS,GAAD,CAAf;MACD;;MACD,OAAOT,QAAQ,CAAC,IAAD,EAAOG,WAAP,CAAf;IACD,CALe,CAAhB;EAMD,CA7BD;AA8BD,CArCD"},"metadata":{},"sourceType":"script"}